{"file":"/home/runner/workspace/server/storage.ts","mappings":"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","names":[],"sources":["/home/runner/workspace/server/storage.ts"],"sourcesContent":["import {\n  users,\n  userCredentials,\n  identities,\n  auditLogs,\n  type User,\n  type UpsertUser,\n  type UserCredentials,\n  type InsertUserCredentials,\n  type Identity,\n  type InsertIdentity,\n  type UpdateIdentity,\n  type InsertAuditLog,\n} from \"@shared/schema\";\nimport { db } from \"./db\";\nimport { eq, and, desc, ilike, or, sql } from \"drizzle-orm\";\n\n// Public identity type with whitelisted fields for search\nexport type PublicIdentity = {\n  id: string;\n  personalName: string;\n  context: string;\n  title: string | null;\n  pronouns: string | null;\n  avatarUrl: string | null;\n  socialLinks: Record<string, string>;\n  otherNames: string[];\n};\n\nexport type SearchResult = {\n  identities: PublicIdentity[];\n  hasMore: boolean;\n};\n\nexport interface IStorage {\n  // User operations (supports both Replit Auth and username/password)\n  getUser(id: string): Promise<User | undefined>;\n  getUserByEmail(email: string): Promise<User | undefined>;\n  upsertUser(user: UpsertUser): Promise<User>;\n  \n  // User credentials operations (for username/password auth)\n  createUserCredentials(credentials: InsertUserCredentials): Promise<UserCredentials>;\n  getUserCredentialsByUsername(username: string): Promise<UserCredentials | undefined>;\n  getUserByCredentialsId(credentialsId: string): Promise<User | undefined>;\n  \n  // Cross-user context access\n  getIdentitiesByUserAndContext(targetUserId: string, context: string, requestingUserId: string): Promise<PublicIdentity[]>;\n  \n  // Public search operations\n  searchPublicIdentities(context: string, query: string, limit: number, cursor?: string): Promise<SearchResult>;\n  getPublicIdentity(id: string): Promise<PublicIdentity | undefined>;\n  \n  // Identity operations\n  getIdentities(userId: string, context?: string): Promise<Identity[]>;\n  getIdentity(id: string, userId: string): Promise<Identity | undefined>;\n  createIdentity(userId: string, identity: InsertIdentity): Promise<Identity>;\n  updateIdentity(id: string, userId: string, updates: UpdateIdentity): Promise<Identity | undefined>;\n  deleteIdentity(id: string, userId: string): Promise<boolean>;\n  setPrimaryIdentity(id: string, userId: string): Promise<Identity | undefined>;\n  getPrimaryIdentity(userId: string): Promise<Identity | undefined>;\n  \n  // Audit operations\n  createAuditLog(auditLog: InsertAuditLog): Promise<void>;\n}\n\nexport class DatabaseStorage implements IStorage {\n  async getUser(id: string): Promise<User | undefined> {\n    const [user] = await db.select().from(users).where(eq(users.id, id));\n    return user;\n  }\n\n  async getUserByEmail(email: string): Promise<User | undefined> {\n    const [user] = await db.select().from(users).where(eq(users.email, email));\n    return user;\n  }\n\n  async upsertUser(userData: UpsertUser): Promise<User> {\n    const [user] = await db\n      .insert(users)\n      .values(userData)\n      .onConflictDoUpdate({\n        target: users.id,\n        set: {\n          ...userData,\n          updatedAt: new Date(),\n        },\n      })\n      .returning();\n    return user;\n  }\n\n  async createUserCredentials(credentials: InsertUserCredentials): Promise<UserCredentials> {\n    const [userCreds] = await db\n      .insert(userCredentials)\n      .values(credentials)\n      .returning();\n    return userCreds;\n  }\n\n  async getUserCredentialsByUsername(username: string): Promise<UserCredentials | undefined> {\n    const [creds] = await db\n      .select()\n      .from(userCredentials)\n      .where(eq(userCredentials.username, username));\n    return creds;\n  }\n\n  async getUserByCredentialsId(credentialsId: string): Promise<User | undefined> {\n    const [result] = await db\n      .select()\n      .from(users)\n      .innerJoin(userCredentials, eq(users.id, userCredentials.userId))\n      .where(eq(userCredentials.id, credentialsId));\n    return result?.users;\n  }\n\n  async getIdentitiesByUserAndContext(targetUserId: string, context: string, requestingUserId: string): Promise<PublicIdentity[]> {\n    // Restrict cross-user access to only discoverable identities with whitelisted fields\n    const results = await db\n      .select({\n        id: identities.id,\n        personalName: identities.personalName,\n        context: identities.context,\n        title: identities.title,\n        pronouns: identities.pronouns,\n        avatarUrl: identities.avatarUrl,\n        socialLinks: identities.socialLinks,\n        otherNames: identities.otherNames,\n      })\n      .from(identities)\n      .where(and(\n        eq(identities.userId, targetUserId), \n        eq(identities.context, context),\n        eq(identities.isDiscoverable, true) // Only discoverable identities\n      ))\n      .orderBy(desc(identities.isPrimary), desc(identities.createdAt));\n\n    // Create audit log for cross-user access\n    await this.createAuditLog({\n      userId: requestingUserId,\n      entity: \"identity\",\n      entityId: targetUserId,\n      operation: \"cross-user-access\",\n      diff: { context, targetUserId, accessedCount: results.length },\n    });\n\n    // Map to PublicIdentity type with proper field handling\n    return results.map(row => ({\n      ...row,\n      socialLinks: row.socialLinks as Record<string, string>,\n      otherNames: row.otherNames || [],\n    }));\n  }\n\n  async getIdentities(userId: string, context?: string): Promise<Identity[]> {\n    const conditions = [eq(identities.userId, userId)];\n    if (context) {\n      conditions.push(eq(identities.context, context));\n    }\n\n    const results = await db\n      .select()\n      .from(identities)\n      .where(and(...conditions))\n      .orderBy(desc(identities.isPrimary), desc(identities.createdAt));\n\n    return results;\n  }\n\n  async getIdentity(id: string, userId: string): Promise<Identity | undefined> {\n    const [identity] = await db\n      .select()\n      .from(identities)\n      .where(and(eq(identities.id, id), eq(identities.userId, userId)));\n    \n    return identity;\n  }\n\n  async createIdentity(userId: string, identity: InsertIdentity): Promise<Identity> {\n    return await db.transaction(async (tx) => {\n      // If this should be primary, unset the current primary\n      if (identity.isPrimary) {\n        await tx\n          .update(identities)\n          .set({ isPrimary: false, updatedAt: new Date() })\n          .where(and(eq(identities.userId, userId), eq(identities.isPrimary, true)));\n      }\n\n      const [newIdentity] = await tx\n        .insert(identities)\n        .values({ ...identity, userId })\n        .returning();\n\n      // Create audit log\n      await tx.insert(auditLogs).values({\n        userId,\n        entity: \"identity\",\n        entityId: newIdentity.id,\n        operation: \"create\",\n        diff: { created: newIdentity },\n      });\n\n      return newIdentity;\n    });\n  }\n\n  async updateIdentity(id: string, userId: string, updates: UpdateIdentity): Promise<Identity | undefined> {\n    return await db.transaction(async (tx) => {\n      const [existing] = await tx\n        .select()\n        .from(identities)\n        .where(and(eq(identities.id, id), eq(identities.userId, userId)));\n\n      if (!existing) return undefined;\n\n      // If setting as primary, unset the current primary\n      if (updates.isPrimary) {\n        await tx\n          .update(identities)\n          .set({ isPrimary: false, updatedAt: new Date() })\n          .where(and(eq(identities.userId, userId), eq(identities.isPrimary, true)));\n      }\n\n      const [updated] = await tx\n        .update(identities)\n        .set({ ...updates, updatedAt: new Date() })\n        .where(and(eq(identities.id, id), eq(identities.userId, userId)))\n        .returning();\n\n      // Create audit log\n      await tx.insert(auditLogs).values({\n        userId,\n        entity: \"identity\",\n        entityId: id,\n        operation: \"update\",\n        diff: { before: existing, after: updated },\n      });\n\n      return updated;\n    });\n  }\n\n  async deleteIdentity(id: string, userId: string): Promise<boolean> {\n    return await db.transaction(async (tx) => {\n      const [existing] = await tx\n        .select()\n        .from(identities)\n        .where(and(eq(identities.id, id), eq(identities.userId, userId)));\n\n      if (!existing) return false;\n\n      const result = await tx\n        .delete(identities)\n        .where(and(eq(identities.id, id), eq(identities.userId, userId)));\n\n      // Create audit log\n      await tx.insert(auditLogs).values({\n        userId,\n        entity: \"identity\",\n        entityId: id,\n        operation: \"delete\",\n        diff: { deleted: existing },\n      });\n\n      return (result.rowCount || 0) > 0;\n    });\n  }\n\n  async setPrimaryIdentity(id: string, userId: string): Promise<Identity | undefined> {\n    return await db.transaction(async (tx) => {\n      const [existing] = await tx\n        .select()\n        .from(identities)\n        .where(and(eq(identities.id, id), eq(identities.userId, userId)));\n\n      if (!existing) return undefined;\n\n      // Unset current primary\n      await tx\n        .update(identities)\n        .set({ isPrimary: false, updatedAt: new Date() })\n        .where(and(eq(identities.userId, userId), eq(identities.isPrimary, true)));\n\n      // Set new primary\n      const [updated] = await tx\n        .update(identities)\n        .set({ isPrimary: true, updatedAt: new Date() })\n        .where(and(eq(identities.id, id), eq(identities.userId, userId)))\n        .returning();\n\n      // Create audit log\n      await tx.insert(auditLogs).values({\n        userId,\n        entity: \"identity\",\n        entityId: id,\n        operation: \"set-primary\",\n        diff: { before: existing, after: updated },\n      });\n\n      return updated;\n    });\n  }\n\n  async getPrimaryIdentity(userId: string): Promise<Identity | undefined> {\n    const [identity] = await db\n      .select()\n      .from(identities)\n      .where(and(eq(identities.userId, userId), eq(identities.isPrimary, true)));\n    \n    return identity;\n  }\n\n  async searchPublicIdentities(context: string, query: string, limit: number, cursor?: string): Promise<SearchResult> {\n    // Build search conditions\n    const conditions = [\n      eq(identities.context, context),\n      eq(identities.isDiscoverable, true)\n    ];\n    \n    // Add text search conditions\n    if (query.trim()) {\n      const searchPattern = `%${query}%`;\n      conditions.push(\n        or(\n          ilike(identities.personalName, searchPattern),\n          ilike(identities.title, searchPattern),\n          // Search in other_names array using EXISTS with unnest\n          sql`EXISTS(SELECT 1 FROM unnest(${identities.otherNames}) AS name WHERE name ILIKE ${searchPattern})`\n        )!\n      );\n    }\n\n    // Add cursor condition for pagination\n    if (cursor) {\n      conditions.push(sql`(${identities.createdAt}, ${identities.id}) < (SELECT created_at, id FROM ${identities} WHERE id = ${cursor})`);\n    }\n\n    // Execute query with limit + 1 to check for more results\n    const results = await db\n      .select({\n        id: identities.id,\n        personalName: identities.personalName,\n        context: identities.context,\n        title: identities.title,\n        pronouns: identities.pronouns,\n        avatarUrl: identities.avatarUrl,\n        socialLinks: identities.socialLinks,\n        otherNames: identities.otherNames,\n      })\n      .from(identities)\n      .where(and(...conditions))\n      .orderBy(desc(identities.isPrimary), desc(identities.createdAt), desc(identities.id))\n      .limit(limit + 1);\n\n    // Check if there are more results\n    const hasMore = results.length > limit;\n    const identitiesResult = hasMore ? results.slice(0, limit) : results;\n\n    return {\n      identities: identitiesResult.map(row => ({\n        ...row,\n        socialLinks: row.socialLinks as Record<string, string>,\n        otherNames: row.otherNames || [],\n      })),\n      hasMore,\n    };\n  }\n\n  async getPublicIdentity(id: string): Promise<PublicIdentity | undefined> {\n    const [result] = await db\n      .select({\n        id: identities.id,\n        personalName: identities.personalName,\n        context: identities.context,\n        title: identities.title,\n        pronouns: identities.pronouns,\n        avatarUrl: identities.avatarUrl,\n        socialLinks: identities.socialLinks,\n        otherNames: identities.otherNames,\n      })\n      .from(identities)\n      .where(and(eq(identities.id, id), eq(identities.isDiscoverable, true)));\n\n    if (!result) return undefined;\n\n    return {\n      ...result,\n      socialLinks: result.socialLinks as Record<string, string>,\n      otherNames: result.otherNames || [],\n    };\n  }\n\n  async createAuditLog(auditLog: InsertAuditLog): Promise<void> {\n    await db.insert(auditLogs).values(auditLog);\n  }\n}\n\nexport const storage = new DatabaseStorage();\n"],"version":3}