19c3d8ae17f5d0a46f1f55e8b33d496b
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.storage = exports.DatabaseStorage = void 0;
const schema_1 = require("@shared/schema");
const db_1 = require("./db");
const drizzle_orm_1 = require("drizzle-orm");
class DatabaseStorage {
    async getUser(id) {
        const [user] = await db_1.db.select().from(schema_1.users).where((0, drizzle_orm_1.eq)(schema_1.users.id, id));
        return user;
    }
    async getUserByEmail(email) {
        const [user] = await db_1.db.select().from(schema_1.users).where((0, drizzle_orm_1.eq)(schema_1.users.email, email));
        return user;
    }
    async upsertUser(userData) {
        const [user] = await db_1.db
            .insert(schema_1.users)
            .values(userData)
            .onConflictDoUpdate({
            target: schema_1.users.id,
            set: {
                ...userData,
                updatedAt: new Date(),
            },
        })
            .returning();
        return user;
    }
    async createUserCredentials(credentials) {
        const [userCreds] = await db_1.db
            .insert(schema_1.userCredentials)
            .values(credentials)
            .returning();
        return userCreds;
    }
    async getUserCredentialsByUsername(username) {
        const [creds] = await db_1.db
            .select()
            .from(schema_1.userCredentials)
            .where((0, drizzle_orm_1.eq)(schema_1.userCredentials.username, username));
        return creds;
    }
    async getUserByCredentialsId(credentialsId) {
        const [result] = await db_1.db
            .select()
            .from(schema_1.users)
            .innerJoin(schema_1.userCredentials, (0, drizzle_orm_1.eq)(schema_1.users.id, schema_1.userCredentials.userId))
            .where((0, drizzle_orm_1.eq)(schema_1.userCredentials.id, credentialsId));
        return result?.users;
    }
    async getIdentitiesByUserAndContext(targetUserId, context, requestingUserId) {
        // Restrict cross-user access to only discoverable identities with whitelisted fields
        const results = await db_1.db
            .select({
            id: schema_1.identities.id,
            personalName: schema_1.identities.personalName,
            context: schema_1.identities.context,
            title: schema_1.identities.title,
            pronouns: schema_1.identities.pronouns,
            avatarUrl: schema_1.identities.avatarUrl,
            socialLinks: schema_1.identities.socialLinks,
            otherNames: schema_1.identities.otherNames,
        })
            .from(schema_1.identities)
            .where((0, drizzle_orm_1.and)((0, drizzle_orm_1.eq)(schema_1.identities.userId, targetUserId), (0, drizzle_orm_1.eq)(schema_1.identities.context, context), (0, drizzle_orm_1.eq)(schema_1.identities.isDiscoverable, true) // Only discoverable identities
        ))
            .orderBy((0, drizzle_orm_1.desc)(schema_1.identities.isPrimary), (0, drizzle_orm_1.desc)(schema_1.identities.createdAt));
        // Create audit log for cross-user access
        await this.createAuditLog({
            userId: requestingUserId,
            entity: "identity",
            entityId: targetUserId,
            operation: "cross-user-access",
            diff: { context, targetUserId, accessedCount: results.length },
        });
        // Map to PublicIdentity type with proper field handling
        return results.map(row => ({
            ...row,
            socialLinks: row.socialLinks,
            otherNames: row.otherNames || [],
        }));
    }
    async getIdentities(userId, context) {
        const conditions = [(0, drizzle_orm_1.eq)(schema_1.identities.userId, userId)];
        if (context) {
            conditions.push((0, drizzle_orm_1.eq)(schema_1.identities.context, context));
        }
        const results = await db_1.db
            .select()
            .from(schema_1.identities)
            .where((0, drizzle_orm_1.and)(...conditions))
            .orderBy((0, drizzle_orm_1.desc)(schema_1.identities.isPrimary), (0, drizzle_orm_1.desc)(schema_1.identities.createdAt));
        return results;
    }
    async getIdentity(id, userId) {
        const [identity] = await db_1.db
            .select()
            .from(schema_1.identities)
            .where((0, drizzle_orm_1.and)((0, drizzle_orm_1.eq)(schema_1.identities.id, id), (0, drizzle_orm_1.eq)(schema_1.identities.userId, userId)));
        return identity;
    }
    async createIdentity(userId, identity) {
        return await db_1.db.transaction(async (tx) => {
            // If this should be primary, unset the current primary
            if (identity.isPrimary) {
                await tx
                    .update(schema_1.identities)
                    .set({ isPrimary: false, updatedAt: new Date() })
                    .where((0, drizzle_orm_1.and)((0, drizzle_orm_1.eq)(schema_1.identities.userId, userId), (0, drizzle_orm_1.eq)(schema_1.identities.isPrimary, true)));
            }
            const [newIdentity] = await tx
                .insert(schema_1.identities)
                .values({ ...identity, userId })
                .returning();
            // Create audit log
            await tx.insert(schema_1.auditLogs).values({
                userId,
                entity: "identity",
                entityId: newIdentity.id,
                operation: "create",
                diff: { created: newIdentity },
            });
            return newIdentity;
        });
    }
    async updateIdentity(id, userId, updates) {
        return await db_1.db.transaction(async (tx) => {
            const [existing] = await tx
                .select()
                .from(schema_1.identities)
                .where((0, drizzle_orm_1.and)((0, drizzle_orm_1.eq)(schema_1.identities.id, id), (0, drizzle_orm_1.eq)(schema_1.identities.userId, userId)));
            if (!existing)
                return undefined;
            // If setting as primary, unset the current primary
            if (updates.isPrimary) {
                await tx
                    .update(schema_1.identities)
                    .set({ isPrimary: false, updatedAt: new Date() })
                    .where((0, drizzle_orm_1.and)((0, drizzle_orm_1.eq)(schema_1.identities.userId, userId), (0, drizzle_orm_1.eq)(schema_1.identities.isPrimary, true)));
            }
            const [updated] = await tx
                .update(schema_1.identities)
                .set({ ...updates, updatedAt: new Date() })
                .where((0, drizzle_orm_1.and)((0, drizzle_orm_1.eq)(schema_1.identities.id, id), (0, drizzle_orm_1.eq)(schema_1.identities.userId, userId)))
                .returning();
            // Create audit log
            await tx.insert(schema_1.auditLogs).values({
                userId,
                entity: "identity",
                entityId: id,
                operation: "update",
                diff: { before: existing, after: updated },
            });
            return updated;
        });
    }
    async deleteIdentity(id, userId) {
        return await db_1.db.transaction(async (tx) => {
            const [existing] = await tx
                .select()
                .from(schema_1.identities)
                .where((0, drizzle_orm_1.and)((0, drizzle_orm_1.eq)(schema_1.identities.id, id), (0, drizzle_orm_1.eq)(schema_1.identities.userId, userId)));
            if (!existing)
                return false;
            const result = await tx
                .delete(schema_1.identities)
                .where((0, drizzle_orm_1.and)((0, drizzle_orm_1.eq)(schema_1.identities.id, id), (0, drizzle_orm_1.eq)(schema_1.identities.userId, userId)));
            // Create audit log
            await tx.insert(schema_1.auditLogs).values({
                userId,
                entity: "identity",
                entityId: id,
                operation: "delete",
                diff: { deleted: existing },
            });
            return (result.rowCount || 0) > 0;
        });
    }
    async setPrimaryIdentity(id, userId) {
        return await db_1.db.transaction(async (tx) => {
            const [existing] = await tx
                .select()
                .from(schema_1.identities)
                .where((0, drizzle_orm_1.and)((0, drizzle_orm_1.eq)(schema_1.identities.id, id), (0, drizzle_orm_1.eq)(schema_1.identities.userId, userId)));
            if (!existing)
                return undefined;
            // Unset current primary
            await tx
                .update(schema_1.identities)
                .set({ isPrimary: false, updatedAt: new Date() })
                .where((0, drizzle_orm_1.and)((0, drizzle_orm_1.eq)(schema_1.identities.userId, userId), (0, drizzle_orm_1.eq)(schema_1.identities.isPrimary, true)));
            // Set new primary
            const [updated] = await tx
                .update(schema_1.identities)
                .set({ isPrimary: true, updatedAt: new Date() })
                .where((0, drizzle_orm_1.and)((0, drizzle_orm_1.eq)(schema_1.identities.id, id), (0, drizzle_orm_1.eq)(schema_1.identities.userId, userId)))
                .returning();
            // Create audit log
            await tx.insert(schema_1.auditLogs).values({
                userId,
                entity: "identity",
                entityId: id,
                operation: "set-primary",
                diff: { before: existing, after: updated },
            });
            return updated;
        });
    }
    async getPrimaryIdentity(userId) {
        const [identity] = await db_1.db
            .select()
            .from(schema_1.identities)
            .where((0, drizzle_orm_1.and)((0, drizzle_orm_1.eq)(schema_1.identities.userId, userId), (0, drizzle_orm_1.eq)(schema_1.identities.isPrimary, true)));
        return identity;
    }
    async searchPublicIdentities(context, query, limit, cursor) {
        // Build search conditions
        const conditions = [
            (0, drizzle_orm_1.eq)(schema_1.identities.context, context),
            (0, drizzle_orm_1.eq)(schema_1.identities.isDiscoverable, true)
        ];
        // Add text search conditions
        if (query.trim()) {
            const searchPattern = `%${query}%`;
            conditions.push((0, drizzle_orm_1.or)((0, drizzle_orm_1.ilike)(schema_1.identities.personalName, searchPattern), (0, drizzle_orm_1.ilike)(schema_1.identities.title, searchPattern), 
            // Search in other_names array using EXISTS with unnest
            (0, drizzle_orm_1.sql) `EXISTS(SELECT 1 FROM unnest(${schema_1.identities.otherNames}) AS name WHERE name ILIKE ${searchPattern})`));
        }
        // Add cursor condition for pagination
        if (cursor) {
            conditions.push((0, drizzle_orm_1.sql) `(${schema_1.identities.createdAt}, ${schema_1.identities.id}) < (SELECT created_at, id FROM ${schema_1.identities} WHERE id = ${cursor})`);
        }
        // Execute query with limit + 1 to check for more results
        const results = await db_1.db
            .select({
            id: schema_1.identities.id,
            personalName: schema_1.identities.personalName,
            context: schema_1.identities.context,
            title: schema_1.identities.title,
            pronouns: schema_1.identities.pronouns,
            avatarUrl: schema_1.identities.avatarUrl,
            socialLinks: schema_1.identities.socialLinks,
            otherNames: schema_1.identities.otherNames,
        })
            .from(schema_1.identities)
            .where((0, drizzle_orm_1.and)(...conditions))
            .orderBy((0, drizzle_orm_1.desc)(schema_1.identities.isPrimary), (0, drizzle_orm_1.desc)(schema_1.identities.createdAt), (0, drizzle_orm_1.desc)(schema_1.identities.id))
            .limit(limit + 1);
        // Check if there are more results
        const hasMore = results.length > limit;
        const identitiesResult = hasMore ? results.slice(0, limit) : results;
        return {
            identities: identitiesResult.map(row => ({
                ...row,
                socialLinks: row.socialLinks,
                otherNames: row.otherNames || [],
            })),
            hasMore,
        };
    }
    async getPublicIdentity(id) {
        const [result] = await db_1.db
            .select({
            id: schema_1.identities.id,
            personalName: schema_1.identities.personalName,
            context: schema_1.identities.context,
            title: schema_1.identities.title,
            pronouns: schema_1.identities.pronouns,
            avatarUrl: schema_1.identities.avatarUrl,
            socialLinks: schema_1.identities.socialLinks,
            otherNames: schema_1.identities.otherNames,
        })
            .from(schema_1.identities)
            .where((0, drizzle_orm_1.and)((0, drizzle_orm_1.eq)(schema_1.identities.id, id), (0, drizzle_orm_1.eq)(schema_1.identities.isDiscoverable, true)));
        if (!result)
            return undefined;
        return {
            ...result,
            socialLinks: result.socialLinks,
            otherNames: result.otherNames || [],
        };
    }
    async createAuditLog(auditLog) {
        await db_1.db.insert(schema_1.auditLogs).values(auditLog);
    }
}
exports.DatabaseStorage = DatabaseStorage;
exports.storage = new DatabaseStorage();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,