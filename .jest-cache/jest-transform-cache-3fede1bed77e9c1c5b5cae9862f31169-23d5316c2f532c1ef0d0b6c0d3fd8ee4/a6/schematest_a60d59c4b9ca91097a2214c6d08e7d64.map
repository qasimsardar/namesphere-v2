{"file":"/home/runner/workspace/server/__tests__/schema.test.ts","mappings":"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","names":[],"sources":["/home/runner/workspace/server/__tests__/schema.test.ts"],"sourcesContent":["import { describe, test, expect } from '@jest/globals';\nimport { insertIdentitySchema, registerSchema, loginSchema } from '../../shared/schema';\n\ndescribe('Schema Validation', () => {\n  describe('insertIdentitySchema', () => {\n    test('should validate valid identity data', () => {\n      const validData = {\n        personalName: 'John Doe',\n        context: 'work',\n        otherNames: ['John', 'Johnny'],\n        pronouns: 'he/him',\n        title: 'Software Engineer',\n        avatarUrl: 'https://example.com/avatar.jpg',\n        socialLinks: { github: 'https://github.com/johndoe' },\n        isPrimary: false,\n        isDiscoverable: true\n      };\n\n      const result = insertIdentitySchema.safeParse(validData);\n      expect(result.success).toBe(true);\n      if (result.success) {\n        expect(result.data.personalName).toBe('John Doe');\n        expect(result.data.context).toBe('work');\n      }\n    });\n\n    test('should reject invalid context', () => {\n      const invalidData = {\n        personalName: 'John Doe',\n        context: 'invalid-context'\n      };\n\n      const result = insertIdentitySchema.safeParse(invalidData);\n      expect(result.success).toBe(false);\n    });\n\n    test('should reject missing required fields', () => {\n      const invalidData = {\n        context: 'work'\n        // missing personalName\n      };\n\n      const result = insertIdentitySchema.safeParse(invalidData);\n      expect(result.success).toBe(false);\n    });\n  });\n\n  describe('registerSchema', () => {\n    test('should validate valid registration data', () => {\n      const validData = {\n        username: 'testuser',\n        password: 'testpassword123',\n        confirmPassword: 'testpassword123',\n        email: 'test@example.com',\n        firstName: 'Test',\n        lastName: 'User'\n      };\n\n      const result = registerSchema.safeParse(validData);\n      expect(result.success).toBe(true);\n    });\n\n    test('should reject password mismatch', () => {\n      const invalidData = {\n        username: 'testuser',\n        password: 'password1',\n        confirmPassword: 'password2',\n        email: 'test@example.com',\n        firstName: 'Test',\n        lastName: 'User'\n      };\n\n      const result = registerSchema.safeParse(invalidData);\n      expect(result.success).toBe(false);\n    });\n  });\n\n  describe('loginSchema', () => {\n    test('should validate valid login data', () => {\n      const validData = {\n        username: 'testuser',\n        password: 'testpassword123'\n      };\n\n      const result = loginSchema.safeParse(validData);\n      expect(result.success).toBe(true);\n    });\n\n    test('should reject missing username', () => {\n      const invalidData = {\n        password: 'testpassword123'\n      };\n\n      const result = loginSchema.safeParse(invalidData);\n      expect(result.success).toBe(false);\n    });\n  });\n});"],"version":3}