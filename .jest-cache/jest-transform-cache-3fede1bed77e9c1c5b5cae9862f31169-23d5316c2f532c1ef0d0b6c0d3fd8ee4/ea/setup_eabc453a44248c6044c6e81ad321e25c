055757563a2fdc750ef9ec8dce6c854e
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const globals_1 = require("@jest/globals");
const db_1 = require("../db");
const drizzle_orm_1 = require("drizzle-orm");
// Set test environment variables
process.env.NODE_ENV = 'test';
process.env.SESSION_SECRET = 'test-session-secret';
process.env.REPLIT_DOMAINS = 'localhost:5000';
process.env.REPL_ID = 'test-repl-id';
process.env.ISSUER_URL = 'https://replit.com/oidc';
// Increase timeout for database operations
globals_1.jest.setTimeout(30000);
// Global test setup
(0, globals_1.beforeAll)(async () => {
    // Ensure we have a test database URL
    if (!process.env.DATABASE_URL) {
        throw new Error('DATABASE_URL environment variable is required for testing');
    }
    // Verify database connection
    try {
        await db_1.db.execute((0, drizzle_orm_1.sql) `SELECT 1`);
        console.log('✅ Test database connection established');
    }
    catch (error) {
        console.error('❌ Failed to connect to test database:', error);
        console.error('Please ensure DATABASE_URL points to a test database');
        throw error;
    }
});
// Clean up after each test
(0, globals_1.afterEach)(async () => {
    try {
        // Clean up test data in reverse order of dependencies
        await db_1.db.execute((0, drizzle_orm_1.sql) `DELETE FROM audit_logs WHERE user_id LIKE 'test-%'`);
        await db_1.db.execute((0, drizzle_orm_1.sql) `DELETE FROM identities WHERE user_id LIKE 'test-%'`);
        await db_1.db.execute((0, drizzle_orm_1.sql) `DELETE FROM user_credentials WHERE user_id LIKE 'test-%'`);
        await db_1.db.execute((0, drizzle_orm_1.sql) `DELETE FROM users WHERE id LIKE 'test-%'`);
        await db_1.db.execute((0, drizzle_orm_1.sql) `DELETE FROM sessions WHERE sid LIKE 'test-%'`);
    }
    catch (error) {
        console.warn('Warning: Failed to clean up test data:', error);
    }
});
// Global teardown
(0, globals_1.afterAll)(async () => {
    // Close database connection
    console.log('🧹 Cleaning up test environment');
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJmaWxlIjoiL2hvbWUvcnVubmVyL3dvcmtzcGFjZS9zZXJ2ZXIvX190ZXN0c19fL3NldHVwLnRzIiwibWFwcGluZ3MiOiI7O0FBQUEsMkNBQWlGO0FBQ2pGLDhCQUEyQjtBQUMzQiw2Q0FBa0M7QUFFbEMsaUNBQWlDO0FBQ2pDLE9BQU8sQ0FBQyxHQUFHLENBQUMsUUFBUSxHQUFHLE1BQU0sQ0FBQztBQUM5QixPQUFPLENBQUMsR0FBRyxDQUFDLGNBQWMsR0FBRyxxQkFBcUIsQ0FBQztBQUNuRCxPQUFPLENBQUMsR0FBRyxDQUFDLGNBQWMsR0FBRyxnQkFBZ0IsQ0FBQztBQUM5QyxPQUFPLENBQUMsR0FBRyxDQUFDLE9BQU8sR0FBRyxjQUFjLENBQUM7QUFDckMsT0FBTyxDQUFDLEdBQUcsQ0FBQyxVQUFVLEdBQUcseUJBQXlCLENBQUM7QUFFbkQsMkNBQTJDO0FBQzNDLGNBQUksQ0FBQyxVQUFVLENBQUMsS0FBSyxDQUFDLENBQUM7QUFFdkIsb0JBQW9CO0FBQ3BCLElBQUEsbUJBQVMsRUFBQyxLQUFLLElBQUksRUFBRTtJQUNuQixxQ0FBcUM7SUFDckMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxHQUFHLENBQUMsWUFBWSxFQUFFLENBQUM7UUFDOUIsTUFBTSxJQUFJLEtBQUssQ0FBQywyREFBMkQsQ0FBQyxDQUFDO0lBQy9FLENBQUM7SUFFRCw2QkFBNkI7SUFDN0IsSUFBSSxDQUFDO1FBQ0gsTUFBTSxPQUFFLENBQUMsT0FBTyxDQUFDLElBQUEsaUJBQUcsRUFBQSxVQUFVLENBQUMsQ0FBQztRQUNoQyxPQUFPLENBQUMsR0FBRyxDQUFDLHdDQUF3QyxDQUFDLENBQUM7SUFDeEQsQ0FBQztJQUFDLE9BQU8sS0FBSyxFQUFFLENBQUM7UUFDZixPQUFPLENBQUMsS0FBSyxDQUFDLHVDQUF1QyxFQUFFLEtBQUssQ0FBQyxDQUFDO1FBQzlELE9BQU8sQ0FBQyxLQUFLLENBQUMsc0RBQXNELENBQUMsQ0FBQztRQUN0RSxNQUFNLEtBQUssQ0FBQztJQUNkLENBQUM7QUFDSCxDQUFDLENBQUMsQ0FBQztBQUVILDJCQUEyQjtBQUMzQixJQUFBLG1CQUFTLEVBQUMsS0FBSyxJQUFJLEVBQUU7SUFDbkIsSUFBSSxDQUFDO1FBQ0gsc0RBQXNEO1FBQ3RELE1BQU0sT0FBRSxDQUFDLE9BQU8sQ0FBQyxJQUFBLGlCQUFHLEVBQUEsb0RBQW9ELENBQUMsQ0FBQztRQUMxRSxNQUFNLE9BQUUsQ0FBQyxPQUFPLENBQUMsSUFBQSxpQkFBRyxFQUFBLG9EQUFvRCxDQUFDLENBQUM7UUFDMUUsTUFBTSxPQUFFLENBQUMsT0FBTyxDQUFDLElBQUEsaUJBQUcsRUFBQSwwREFBMEQsQ0FBQyxDQUFDO1FBQ2hGLE1BQU0sT0FBRSxDQUFDLE9BQU8sQ0FBQyxJQUFBLGlCQUFHLEVBQUEsMENBQTBDLENBQUMsQ0FBQztRQUNoRSxNQUFNLE9BQUUsQ0FBQyxPQUFPLENBQUMsSUFBQSxpQkFBRyxFQUFBLDhDQUE4QyxDQUFDLENBQUM7SUFDdEUsQ0FBQztJQUFDLE9BQU8sS0FBSyxFQUFFLENBQUM7UUFDZixPQUFPLENBQUMsSUFBSSxDQUFDLHdDQUF3QyxFQUFFLEtBQUssQ0FBQyxDQUFDO0lBQ2hFLENBQUM7QUFDSCxDQUFDLENBQUMsQ0FBQztBQUVILGtCQUFrQjtBQUNsQixJQUFBLGtCQUFRLEVBQUMsS0FBSyxJQUFJLEVBQUU7SUFDbEIsNEJBQTRCO0lBQzVCLE9BQU8sQ0FBQyxHQUFHLENBQUMsaUNBQWlDLENBQUMsQ0FBQztBQUNqRCxDQUFDLENBQUMsQ0FBQyIsIm5hbWVzIjpbXSwic291cmNlcyI6WyIvaG9tZS9ydW5uZXIvd29ya3NwYWNlL3NlcnZlci9fX3Rlc3RzX18vc2V0dXAudHMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgYmVmb3JlQWxsLCBhZnRlckFsbCwgYmVmb3JlRWFjaCwgYWZ0ZXJFYWNoLCBqZXN0IH0gZnJvbSAnQGplc3QvZ2xvYmFscyc7XG5pbXBvcnQgeyBkYiB9IGZyb20gJy4uL2RiJztcbmltcG9ydCB7IHNxbCB9IGZyb20gJ2RyaXp6bGUtb3JtJztcblxuLy8gU2V0IHRlc3QgZW52aXJvbm1lbnQgdmFyaWFibGVzXG5wcm9jZXNzLmVudi5OT0RFX0VOViA9ICd0ZXN0JztcbnByb2Nlc3MuZW52LlNFU1NJT05fU0VDUkVUID0gJ3Rlc3Qtc2Vzc2lvbi1zZWNyZXQnO1xucHJvY2Vzcy5lbnYuUkVQTElUX0RPTUFJTlMgPSAnbG9jYWxob3N0OjUwMDAnO1xucHJvY2Vzcy5lbnYuUkVQTF9JRCA9ICd0ZXN0LXJlcGwtaWQnO1xucHJvY2Vzcy5lbnYuSVNTVUVSX1VSTCA9ICdodHRwczovL3JlcGxpdC5jb20vb2lkYyc7XG5cbi8vIEluY3JlYXNlIHRpbWVvdXQgZm9yIGRhdGFiYXNlIG9wZXJhdGlvbnNcbmplc3Quc2V0VGltZW91dCgzMDAwMCk7XG5cbi8vIEdsb2JhbCB0ZXN0IHNldHVwXG5iZWZvcmVBbGwoYXN5bmMgKCkgPT4ge1xuICAvLyBFbnN1cmUgd2UgaGF2ZSBhIHRlc3QgZGF0YWJhc2UgVVJMXG4gIGlmICghcHJvY2Vzcy5lbnYuREFUQUJBU0VfVVJMKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKCdEQVRBQkFTRV9VUkwgZW52aXJvbm1lbnQgdmFyaWFibGUgaXMgcmVxdWlyZWQgZm9yIHRlc3RpbmcnKTtcbiAgfVxuICBcbiAgLy8gVmVyaWZ5IGRhdGFiYXNlIGNvbm5lY3Rpb25cbiAgdHJ5IHtcbiAgICBhd2FpdCBkYi5leGVjdXRlKHNxbGBTRUxFQ1QgMWApO1xuICAgIGNvbnNvbGUubG9nKCfinIUgVGVzdCBkYXRhYmFzZSBjb25uZWN0aW9uIGVzdGFibGlzaGVkJyk7XG4gIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgY29uc29sZS5lcnJvcign4p2MIEZhaWxlZCB0byBjb25uZWN0IHRvIHRlc3QgZGF0YWJhc2U6JywgZXJyb3IpO1xuICAgIGNvbnNvbGUuZXJyb3IoJ1BsZWFzZSBlbnN1cmUgREFUQUJBU0VfVVJMIHBvaW50cyB0byBhIHRlc3QgZGF0YWJhc2UnKTtcbiAgICB0aHJvdyBlcnJvcjtcbiAgfVxufSk7XG5cbi8vIENsZWFuIHVwIGFmdGVyIGVhY2ggdGVzdFxuYWZ0ZXJFYWNoKGFzeW5jICgpID0+IHtcbiAgdHJ5IHtcbiAgICAvLyBDbGVhbiB1cCB0ZXN0IGRhdGEgaW4gcmV2ZXJzZSBvcmRlciBvZiBkZXBlbmRlbmNpZXNcbiAgICBhd2FpdCBkYi5leGVjdXRlKHNxbGBERUxFVEUgRlJPTSBhdWRpdF9sb2dzIFdIRVJFIHVzZXJfaWQgTElLRSAndGVzdC0lJ2ApO1xuICAgIGF3YWl0IGRiLmV4ZWN1dGUoc3FsYERFTEVURSBGUk9NIGlkZW50aXRpZXMgV0hFUkUgdXNlcl9pZCBMSUtFICd0ZXN0LSUnYCk7XG4gICAgYXdhaXQgZGIuZXhlY3V0ZShzcWxgREVMRVRFIEZST00gdXNlcl9jcmVkZW50aWFscyBXSEVSRSB1c2VyX2lkIExJS0UgJ3Rlc3QtJSdgKTtcbiAgICBhd2FpdCBkYi5leGVjdXRlKHNxbGBERUxFVEUgRlJPTSB1c2VycyBXSEVSRSBpZCBMSUtFICd0ZXN0LSUnYCk7XG4gICAgYXdhaXQgZGIuZXhlY3V0ZShzcWxgREVMRVRFIEZST00gc2Vzc2lvbnMgV0hFUkUgc2lkIExJS0UgJ3Rlc3QtJSdgKTtcbiAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICBjb25zb2xlLndhcm4oJ1dhcm5pbmc6IEZhaWxlZCB0byBjbGVhbiB1cCB0ZXN0IGRhdGE6JywgZXJyb3IpO1xuICB9XG59KTtcblxuLy8gR2xvYmFsIHRlYXJkb3duXG5hZnRlckFsbChhc3luYyAoKSA9PiB7XG4gIC8vIENsb3NlIGRhdGFiYXNlIGNvbm5lY3Rpb25cbiAgY29uc29sZS5sb2coJ/Cfp7kgQ2xlYW5pbmcgdXAgdGVzdCBlbnZpcm9ubWVudCcpO1xufSk7Il0sInZlcnNpb24iOjN9