{"file":"/home/runner/workspace/server/__tests__/auth.test.ts","mappings":"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","names":[],"sources":["/home/runner/workspace/server/__tests__/auth.test.ts"],"sourcesContent":["import { describe, test, expect, beforeAll, afterAll } from '@jest/globals';\nimport request from 'supertest';\nimport type { Express } from 'express';\nimport { createTestApp } from './test-app';\nimport { createTestUser, expectErrorResponse, expectSuccessResponse, cleanupTestData } from './test-utils';\n\ndescribe('Authentication Endpoints', () => {\n  let app: Express;\n\n  beforeAll(async () => {\n    app = await createTestApp();\n  });\n\n  afterAll(async () => {\n    await cleanupTestData();\n  });\n\n  describe('POST /api/register', () => {\n    test('should register a new user with valid data', async () => {\n      const userData = {\n        username: `testuser${Date.now()}`,\n        password: 'testpassword123',\n        confirmPassword: 'testpassword123',\n        email: `test${Date.now()}@example.com`,\n        firstName: 'Test',\n        lastName: 'User'\n      };\n\n      const response = await request(app)\n        .post('/api/register')\n        .send(userData);\n\n      expectSuccessResponse(response, 201);\n      expect(response.body).toHaveProperty('message', 'User registered successfully');\n      expect(response.body).toHaveProperty('user');\n      expect(response.body.user).toHaveProperty('id');\n      expect(response.body.user).toHaveProperty('email', userData.email);\n      expect(response.body.user).not.toHaveProperty('passwordHash');\n    });\n\n    test('should reject registration with invalid email', async () => {\n      const userData = {\n        username: `testuser${Date.now()}`,\n        password: 'testpassword123',\n        confirmPassword: 'testpassword123',\n        email: 'invalid-email',\n        firstName: 'Test',\n        lastName: 'User'\n      };\n\n      const response = await request(app)\n        .post('/api/register')\n        .send(userData);\n\n      expectErrorResponse(response, 400, 'Validation');\n    });\n\n    test('should reject registration with mismatched passwords', async () => {\n      const userData = {\n        username: `testuser${Date.now()}`,\n        password: 'testpassword123',\n        confirmPassword: 'differentpassword',\n        email: `test${Date.now()}@example.com`,\n        firstName: 'Test',\n        lastName: 'User'\n      };\n\n      const response = await request(app)\n        .post('/api/register')\n        .send(userData);\n\n      expectErrorResponse(response, 400, 'match');\n    });\n\n    test('should reject registration with short password', async () => {\n      const userData = {\n        username: `testuser${Date.now()}`,\n        password: '123',\n        confirmPassword: '123',\n        email: `test${Date.now()}@example.com`,\n        firstName: 'Test',\n        lastName: 'User'\n      };\n\n      const response = await request(app)\n        .post('/api/register')\n        .send(userData);\n\n      expectErrorResponse(response, 400, 'Validation');\n    });\n\n    test('should reject registration with duplicate username', async () => {\n      const username = `testuser${Date.now()}`;\n      const userData = {\n        username,\n        password: 'testpassword123',\n        confirmPassword: 'testpassword123',\n        email: `test${Date.now()}@example.com`,\n        firstName: 'Test',\n        lastName: 'User'\n      };\n\n      // First registration should succeed\n      await request(app)\n        .post('/api/register')\n        .send(userData)\n        .expect(201);\n\n      // Second registration with same username should fail\n      const duplicateData = {\n        ...userData,\n        email: `test2${Date.now()}@example.com`\n      };\n\n      const response = await request(app)\n        .post('/api/register')\n        .send(duplicateData);\n\n      expectErrorResponse(response, 409, 'already exists');\n    });\n  });\n\n  describe('POST /api/login/local', () => {\n    test('should login with valid credentials', async () => {\n      const password = 'testpassword123';\n      const { credentials } = await createTestUser({}, { password });\n\n      const response = await request(app)\n        .post('/api/login/local')\n        .send({\n          username: credentials.username,\n          password\n        });\n\n      expectSuccessResponse(response);\n      expect(response.body).toHaveProperty('message', 'Login successful');\n      expect(response.body).toHaveProperty('user');\n      expect(response.body.user).toHaveProperty('id');\n      expect(response.body.user).not.toHaveProperty('passwordHash');\n    });\n\n    test('should reject login with invalid username', async () => {\n      const response = await request(app)\n        .post('/api/login/local')\n        .send({\n          username: 'nonexistentuser',\n          password: 'testpassword123'\n        });\n\n      expectErrorResponse(response, 401, 'Invalid username or password');\n    });\n\n    test('should reject login with invalid password', async () => {\n      const { credentials } = await createTestUser();\n\n      const response = await request(app)\n        .post('/api/login/local')\n        .send({\n          username: credentials.username,\n          password: 'wrongpassword'\n        });\n\n      expectErrorResponse(response, 401, 'Invalid username or password');\n    });\n\n    test('should reject login with missing credentials', async () => {\n      const response = await request(app)\n        .post('/api/login/local')\n        .send({});\n\n      expectErrorResponse(response, 400, 'Validation');\n    });\n  });\n\n  describe('GET /api/auth/user', () => {\n    test('should return user data when authenticated', async () => {\n      const password = 'testpassword123';\n      const { credentials } = await createTestUser({}, { password });\n\n      // Login first\n      const agent = request.agent(app);\n      await agent\n        .post('/api/login/local')\n        .send({\n          username: credentials.username,\n          password\n        })\n        .expect(200);\n\n      // Get user data\n      const response = await agent\n        .get('/api/auth/user');\n\n      expectSuccessResponse(response);\n      expect(response.body).toHaveProperty('id');\n      expect(response.body).toHaveProperty('email');\n      expect(response.body).toHaveProperty('authProvider', 'local');\n    });\n\n    test('should reject unauthenticated request', async () => {\n      const response = await request(app)\n        .get('/api/auth/user');\n\n      expectErrorResponse(response, 401, 'Unauthorized');\n    });\n  });\n\n  describe('POST /api/logout', () => {\n    test('should logout authenticated user', async () => {\n      const password = 'testpassword123';\n      const { credentials } = await createTestUser({}, { password });\n\n      // Login first\n      const agent = request.agent(app);\n      await agent\n        .post('/api/login/local')\n        .send({\n          username: credentials.username,\n          password\n        })\n        .expect(200);\n\n      // Logout\n      const response = await agent\n        .post('/api/logout');\n\n      expectSuccessResponse(response);\n      expect(response.body).toHaveProperty('message', 'Logged out successfully');\n\n      // Verify user is logged out\n      const userResponse = await agent\n        .get('/api/auth/user');\n\n      expectErrorResponse(userResponse, 401, 'Unauthorized');\n    });\n  });\n});"],"version":3}