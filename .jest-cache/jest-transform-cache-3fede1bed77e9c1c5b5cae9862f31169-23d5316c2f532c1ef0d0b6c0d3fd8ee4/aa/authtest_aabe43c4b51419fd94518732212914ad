26b8263ef3c95c1149ac483148a302b0
"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const globals_1 = require("@jest/globals");
const supertest_1 = __importDefault(require("supertest"));
const test_app_1 = require("./test-app");
const test_utils_1 = require("./test-utils");
(0, globals_1.describe)('Authentication Endpoints', () => {
    let app;
    (0, globals_1.beforeAll)(async () => {
        app = await (0, test_app_1.createTestApp)();
    });
    (0, globals_1.afterAll)(async () => {
        await (0, test_utils_1.cleanupTestData)();
    });
    (0, globals_1.describe)('POST /api/register', () => {
        (0, globals_1.test)('should register a new user with valid data', async () => {
            const userData = {
                username: `testuser${Date.now()}`,
                password: 'testpassword123',
                confirmPassword: 'testpassword123',
                email: `test${Date.now()}@example.com`,
                firstName: 'Test',
                lastName: 'User'
            };
            const response = await (0, supertest_1.default)(app)
                .post('/api/register')
                .send(userData);
            (0, test_utils_1.expectSuccessResponse)(response, 201);
            (0, globals_1.expect)(response.body).toHaveProperty('message', 'User registered successfully');
            (0, globals_1.expect)(response.body).toHaveProperty('user');
            (0, globals_1.expect)(response.body.user).toHaveProperty('id');
            (0, globals_1.expect)(response.body.user).toHaveProperty('email', userData.email);
            (0, globals_1.expect)(response.body.user).not.toHaveProperty('passwordHash');
        });
        (0, globals_1.test)('should reject registration with invalid email', async () => {
            const userData = {
                username: `testuser${Date.now()}`,
                password: 'testpassword123',
                confirmPassword: 'testpassword123',
                email: 'invalid-email',
                firstName: 'Test',
                lastName: 'User'
            };
            const response = await (0, supertest_1.default)(app)
                .post('/api/register')
                .send(userData);
            (0, test_utils_1.expectErrorResponse)(response, 400, 'Validation');
        });
        (0, globals_1.test)('should reject registration with mismatched passwords', async () => {
            const userData = {
                username: `testuser${Date.now()}`,
                password: 'testpassword123',
                confirmPassword: 'differentpassword',
                email: `test${Date.now()}@example.com`,
                firstName: 'Test',
                lastName: 'User'
            };
            const response = await (0, supertest_1.default)(app)
                .post('/api/register')
                .send(userData);
            (0, test_utils_1.expectErrorResponse)(response, 400, 'match');
        });
        (0, globals_1.test)('should reject registration with short password', async () => {
            const userData = {
                username: `testuser${Date.now()}`,
                password: '123',
                confirmPassword: '123',
                email: `test${Date.now()}@example.com`,
                firstName: 'Test',
                lastName: 'User'
            };
            const response = await (0, supertest_1.default)(app)
                .post('/api/register')
                .send(userData);
            (0, test_utils_1.expectErrorResponse)(response, 400, 'Validation');
        });
        (0, globals_1.test)('should reject registration with duplicate username', async () => {
            const username = `testuser${Date.now()}`;
            const userData = {
                username,
                password: 'testpassword123',
                confirmPassword: 'testpassword123',
                email: `test${Date.now()}@example.com`,
                firstName: 'Test',
                lastName: 'User'
            };
            // First registration should succeed
            await (0, supertest_1.default)(app)
                .post('/api/register')
                .send(userData)
                .expect(201);
            // Second registration with same username should fail
            const duplicateData = {
                ...userData,
                email: `test2${Date.now()}@example.com`
            };
            const response = await (0, supertest_1.default)(app)
                .post('/api/register')
                .send(duplicateData);
            (0, test_utils_1.expectErrorResponse)(response, 409, 'already exists');
        });
    });
    (0, globals_1.describe)('POST /api/login/local', () => {
        (0, globals_1.test)('should login with valid credentials', async () => {
            const password = 'testpassword123';
            const { credentials } = await (0, test_utils_1.createTestUser)({}, { password });
            const response = await (0, supertest_1.default)(app)
                .post('/api/login/local')
                .send({
                username: credentials.username,
                password
            });
            (0, test_utils_1.expectSuccessResponse)(response);
            (0, globals_1.expect)(response.body).toHaveProperty('message', 'Login successful');
            (0, globals_1.expect)(response.body).toHaveProperty('user');
            (0, globals_1.expect)(response.body.user).toHaveProperty('id');
            (0, globals_1.expect)(response.body.user).not.toHaveProperty('passwordHash');
        });
        (0, globals_1.test)('should reject login with invalid username', async () => {
            const response = await (0, supertest_1.default)(app)
                .post('/api/login/local')
                .send({
                username: 'nonexistentuser',
                password: 'testpassword123'
            });
            (0, test_utils_1.expectErrorResponse)(response, 401, 'Invalid username or password');
        });
        (0, globals_1.test)('should reject login with invalid password', async () => {
            const { credentials } = await (0, test_utils_1.createTestUser)();
            const response = await (0, supertest_1.default)(app)
                .post('/api/login/local')
                .send({
                username: credentials.username,
                password: 'wrongpassword'
            });
            (0, test_utils_1.expectErrorResponse)(response, 401, 'Invalid username or password');
        });
        (0, globals_1.test)('should reject login with missing credentials', async () => {
            const response = await (0, supertest_1.default)(app)
                .post('/api/login/local')
                .send({});
            (0, test_utils_1.expectErrorResponse)(response, 400, 'Validation');
        });
    });
    (0, globals_1.describe)('GET /api/auth/user', () => {
        (0, globals_1.test)('should return user data when authenticated', async () => {
            const password = 'testpassword123';
            const { credentials } = await (0, test_utils_1.createTestUser)({}, { password });
            // Login first
            const agent = supertest_1.default.agent(app);
            await agent
                .post('/api/login/local')
                .send({
                username: credentials.username,
                password
            })
                .expect(200);
            // Get user data
            const response = await agent
                .get('/api/auth/user');
            (0, test_utils_1.expectSuccessResponse)(response);
            (0, globals_1.expect)(response.body).toHaveProperty('id');
            (0, globals_1.expect)(response.body).toHaveProperty('email');
            (0, globals_1.expect)(response.body).toHaveProperty('authProvider', 'local');
        });
        (0, globals_1.test)('should reject unauthenticated request', async () => {
            const response = await (0, supertest_1.default)(app)
                .get('/api/auth/user');
            (0, test_utils_1.expectErrorResponse)(response, 401, 'Unauthorized');
        });
    });
    (0, globals_1.describe)('POST /api/logout', () => {
        (0, globals_1.test)('should logout authenticated user', async () => {
            const password = 'testpassword123';
            const { credentials } = await (0, test_utils_1.createTestUser)({}, { password });
            // Login first
            const agent = supertest_1.default.agent(app);
            await agent
                .post('/api/login/local')
                .send({
                username: credentials.username,
                password
            })
                .expect(200);
            // Logout
            const response = await agent
                .post('/api/logout');
            (0, test_utils_1.expectSuccessResponse)(response);
            (0, globals_1.expect)(response.body).toHaveProperty('message', 'Logged out successfully');
            // Verify user is logged out
            const userResponse = await agent
                .get('/api/auth/user');
            (0, test_utils_1.expectErrorResponse)(userResponse, 401, 'Unauthorized');
        });
    });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,