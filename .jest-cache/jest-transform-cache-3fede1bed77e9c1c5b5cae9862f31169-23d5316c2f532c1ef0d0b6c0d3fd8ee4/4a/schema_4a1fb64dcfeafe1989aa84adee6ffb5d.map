{"file":"/home/runner/workspace/shared/schema.ts","mappings":"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","names":[],"sources":["/home/runner/workspace/shared/schema.ts"],"sourcesContent":["import { sql, relations } from 'drizzle-orm';\nimport {\n  boolean,\n  index,\n  jsonb,\n  pgTable,\n  text,\n  timestamp,\n  varchar,\n} from \"drizzle-orm/pg-core\";\nimport { createInsertSchema } from \"drizzle-zod\";\nimport { z } from \"zod\";\n\n// Session storage table (required for Replit Auth)\nexport const sessions = pgTable(\n  \"sessions\",\n  {\n    sid: varchar(\"sid\").primaryKey(),\n    sess: jsonb(\"sess\").notNull(),\n    expire: timestamp(\"expire\").notNull(),\n  },\n  (table) => [index(\"IDX_session_expire\").on(table.expire)],\n);\n\n// User storage table (supports both Replit Auth and username/password)\nexport const users = pgTable(\"users\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  email: varchar(\"email\").unique(),\n  firstName: varchar(\"first_name\"),\n  lastName: varchar(\"last_name\"),\n  profileImageUrl: varchar(\"profile_image_url\"),\n  authProvider: varchar(\"auth_provider\").notNull().default(\"replit\"), // \"replit\" or \"local\"\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n});\n\n// User credentials table for username/password authentication\nexport const userCredentials = pgTable(\"user_credentials\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  userId: varchar(\"user_id\").notNull().unique().references(() => users.id, { onDelete: \"cascade\" }),\n  username: varchar(\"username\").notNull().unique(),\n  passwordHash: text(\"password_hash\").notNull(),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n}, (table) => [\n  index(\"user_credentials_user_id_idx\").on(table.userId),\n  index(\"user_credentials_username_idx\").on(table.username),\n]);\n\n// Identity profiles table\nexport const identities = pgTable(\"identities\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  userId: varchar(\"user_id\").notNull().references(() => users.id, { onDelete: \"cascade\" }),\n  personalName: text(\"personal_name\").notNull(),\n  context: text(\"context\").notNull(),\n  otherNames: text(\"other_names\").array().default([]),\n  // Optional attributes for enhanced identity profiles\n  pronouns: text(\"pronouns\"),\n  title: text(\"title\"),\n  avatarUrl: text(\"avatar_url\"),\n  socialLinks: jsonb(\"social_links\").default({}), // {platform: url} mapping\n  isPrimary: boolean(\"is_primary\").default(false),\n  isDiscoverable: boolean(\"is_discoverable\").default(false), // Controls visibility in public search\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n}, (table) => [\n  index(\"identities_user_id_idx\").on(table.userId),\n  index(\"identities_context_idx\").on(table.context),\n]);\n\n// Audit log table\nexport const auditLogs = pgTable(\"audit_logs\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  userId: varchar(\"user_id\").notNull().references(() => users.id, { onDelete: \"cascade\" }),\n  entity: text(\"entity\").notNull(),\n  entityId: varchar(\"entity_id\").notNull(),\n  operation: text(\"operation\").notNull(), // create|update|delete|set-primary\n  diff: jsonb(\"diff\"),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n}, (table) => [\n  index(\"audit_logs_user_id_idx\").on(table.userId),\n  index(\"audit_logs_entity_idx\").on(table.entity),\n]);\n\n// Relations\nexport const usersRelations = relations(users, ({ many, one }) => ({\n  identities: many(identities),\n  auditLogs: many(auditLogs),\n  credentials: one(userCredentials),\n}));\n\nexport const userCredentialsRelations = relations(userCredentials, ({ one }) => ({\n  user: one(users, {\n    fields: [userCredentials.userId],\n    references: [users.id],\n  }),\n}));\n\nexport const identitiesRelations = relations(identities, ({ one }) => ({\n  user: one(users, {\n    fields: [identities.userId],\n    references: [users.id],\n  }),\n}));\n\nexport const auditLogsRelations = relations(auditLogs, ({ one }) => ({\n  user: one(users, {\n    fields: [auditLogs.userId],\n    references: [users.id],\n  }),\n}));\n\n// Schema types\nexport type UpsertUser = typeof users.$inferInsert;\nexport type User = typeof users.$inferSelect;\n\nexport type InsertUserCredentials = typeof userCredentials.$inferInsert;\nexport type UserCredentials = typeof userCredentials.$inferSelect;\n\n// Registration schema for username/password\nexport const registerSchema = z.object({\n  username: z.string().min(3).max(50).regex(/^[a-zA-Z0-9_-]+$/, \"Username can only contain letters, numbers, underscores, and hyphens\"),\n  password: z.string().min(8).max(100),\n  confirmPassword: z.string(),\n  email: z.string().email(),\n  firstName: z.string().min(1).max(100),\n  lastName: z.string().min(1).max(100),\n}).refine((data) => data.password === data.confirmPassword, {\n  message: \"Passwords don't match\",\n  path: [\"confirmPassword\"],\n});\n\n// Login schema for username/password\nexport const loginSchema = z.object({\n  username: z.string().min(1, \"Username is required\"),\n  password: z.string().min(1, \"Password is required\"),\n});\n\nexport type RegisterInput = z.infer<typeof registerSchema>;\nexport type LoginInput = z.infer<typeof loginSchema>;\n\nexport const insertIdentitySchema = createInsertSchema(identities, {\n  context: z.enum([\"work\", \"gaming\", \"social\", \"legal\"]),\n  socialLinks: z.record(z.string(), z.string().url()).optional().default({}),\n}).omit({\n  id: true,\n  userId: true,\n  createdAt: true,\n  updatedAt: true,\n});\n\nexport const updateIdentitySchema = insertIdentitySchema.partial();\n\nexport type InsertIdentity = z.infer<typeof insertIdentitySchema>;\nexport type UpdateIdentity = z.infer<typeof updateIdentitySchema>;\nexport type Identity = typeof identities.$inferSelect;\n\nexport type InsertAuditLog = typeof auditLogs.$inferInsert;\nexport type AuditLog = typeof auditLogs.$inferSelect;\n"],"version":3}