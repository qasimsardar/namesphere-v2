c710ff622ec9ba634698749e38834ce8
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.updateIdentitySchema = exports.insertIdentitySchema = exports.loginSchema = exports.registerSchema = exports.auditLogsRelations = exports.identitiesRelations = exports.userCredentialsRelations = exports.usersRelations = exports.auditLogs = exports.identities = exports.userCredentials = exports.users = exports.sessions = void 0;
const drizzle_orm_1 = require("drizzle-orm");
const pg_core_1 = require("drizzle-orm/pg-core");
const drizzle_zod_1 = require("drizzle-zod");
const zod_1 = require("zod");
// Session storage table (required for Replit Auth)
exports.sessions = (0, pg_core_1.pgTable)("sessions", {
    sid: (0, pg_core_1.varchar)("sid").primaryKey(),
    sess: (0, pg_core_1.jsonb)("sess").notNull(),
    expire: (0, pg_core_1.timestamp)("expire").notNull(),
}, (table) => [(0, pg_core_1.index)("IDX_session_expire").on(table.expire)]);
// User storage table (supports both Replit Auth and username/password)
exports.users = (0, pg_core_1.pgTable)("users", {
    id: (0, pg_core_1.varchar)("id").primaryKey().default((0, drizzle_orm_1.sql) `gen_random_uuid()`),
    email: (0, pg_core_1.varchar)("email").unique(),
    firstName: (0, pg_core_1.varchar)("first_name"),
    lastName: (0, pg_core_1.varchar)("last_name"),
    profileImageUrl: (0, pg_core_1.varchar)("profile_image_url"),
    authProvider: (0, pg_core_1.varchar)("auth_provider").notNull().default("replit"), // "replit" or "local"
    createdAt: (0, pg_core_1.timestamp)("created_at").defaultNow(),
    updatedAt: (0, pg_core_1.timestamp)("updated_at").defaultNow(),
});
// User credentials table for username/password authentication
exports.userCredentials = (0, pg_core_1.pgTable)("user_credentials", {
    id: (0, pg_core_1.varchar)("id").primaryKey().default((0, drizzle_orm_1.sql) `gen_random_uuid()`),
    userId: (0, pg_core_1.varchar)("user_id").notNull().unique().references(() => exports.users.id, { onDelete: "cascade" }),
    username: (0, pg_core_1.varchar)("username").notNull().unique(),
    passwordHash: (0, pg_core_1.text)("password_hash").notNull(),
    createdAt: (0, pg_core_1.timestamp)("created_at").defaultNow(),
    updatedAt: (0, pg_core_1.timestamp)("updated_at").defaultNow(),
}, (table) => [
    (0, pg_core_1.index)("user_credentials_user_id_idx").on(table.userId),
    (0, pg_core_1.index)("user_credentials_username_idx").on(table.username),
]);
// Identity profiles table
exports.identities = (0, pg_core_1.pgTable)("identities", {
    id: (0, pg_core_1.varchar)("id").primaryKey().default((0, drizzle_orm_1.sql) `gen_random_uuid()`),
    userId: (0, pg_core_1.varchar)("user_id").notNull().references(() => exports.users.id, { onDelete: "cascade" }),
    personalName: (0, pg_core_1.text)("personal_name").notNull(),
    context: (0, pg_core_1.text)("context").notNull(),
    otherNames: (0, pg_core_1.text)("other_names").array().default([]),
    // Optional attributes for enhanced identity profiles
    pronouns: (0, pg_core_1.text)("pronouns"),
    title: (0, pg_core_1.text)("title"),
    avatarUrl: (0, pg_core_1.text)("avatar_url"),
    socialLinks: (0, pg_core_1.jsonb)("social_links").default({}), // {platform: url} mapping
    isPrimary: (0, pg_core_1.boolean)("is_primary").default(false),
    isDiscoverable: (0, pg_core_1.boolean)("is_discoverable").default(false), // Controls visibility in public search
    createdAt: (0, pg_core_1.timestamp)("created_at").defaultNow(),
    updatedAt: (0, pg_core_1.timestamp)("updated_at").defaultNow(),
}, (table) => [
    (0, pg_core_1.index)("identities_user_id_idx").on(table.userId),
    (0, pg_core_1.index)("identities_context_idx").on(table.context),
]);
// Audit log table
exports.auditLogs = (0, pg_core_1.pgTable)("audit_logs", {
    id: (0, pg_core_1.varchar)("id").primaryKey().default((0, drizzle_orm_1.sql) `gen_random_uuid()`),
    userId: (0, pg_core_1.varchar)("user_id").notNull().references(() => exports.users.id, { onDelete: "cascade" }),
    entity: (0, pg_core_1.text)("entity").notNull(),
    entityId: (0, pg_core_1.varchar)("entity_id").notNull(),
    operation: (0, pg_core_1.text)("operation").notNull(), // create|update|delete|set-primary
    diff: (0, pg_core_1.jsonb)("diff"),
    createdAt: (0, pg_core_1.timestamp)("created_at").defaultNow(),
}, (table) => [
    (0, pg_core_1.index)("audit_logs_user_id_idx").on(table.userId),
    (0, pg_core_1.index)("audit_logs_entity_idx").on(table.entity),
]);
// Relations
exports.usersRelations = (0, drizzle_orm_1.relations)(exports.users, ({ many, one }) => ({
    identities: many(exports.identities),
    auditLogs: many(exports.auditLogs),
    credentials: one(exports.userCredentials),
}));
exports.userCredentialsRelations = (0, drizzle_orm_1.relations)(exports.userCredentials, ({ one }) => ({
    user: one(exports.users, {
        fields: [exports.userCredentials.userId],
        references: [exports.users.id],
    }),
}));
exports.identitiesRelations = (0, drizzle_orm_1.relations)(exports.identities, ({ one }) => ({
    user: one(exports.users, {
        fields: [exports.identities.userId],
        references: [exports.users.id],
    }),
}));
exports.auditLogsRelations = (0, drizzle_orm_1.relations)(exports.auditLogs, ({ one }) => ({
    user: one(exports.users, {
        fields: [exports.auditLogs.userId],
        references: [exports.users.id],
    }),
}));
// Registration schema for username/password
exports.registerSchema = zod_1.z.object({
    username: zod_1.z.string().min(3).max(50).regex(/^[a-zA-Z0-9_-]+$/, "Username can only contain letters, numbers, underscores, and hyphens"),
    password: zod_1.z.string().min(8).max(100),
    confirmPassword: zod_1.z.string(),
    email: zod_1.z.string().email(),
    firstName: zod_1.z.string().min(1).max(100),
    lastName: zod_1.z.string().min(1).max(100),
}).refine((data) => data.password === data.confirmPassword, {
    message: "Passwords don't match",
    path: ["confirmPassword"],
});
// Login schema for username/password
exports.loginSchema = zod_1.z.object({
    username: zod_1.z.string().min(1, "Username is required"),
    password: zod_1.z.string().min(1, "Password is required"),
});
exports.insertIdentitySchema = (0, drizzle_zod_1.createInsertSchema)(exports.identities, {
    context: zod_1.z.enum(["work", "gaming", "social", "legal"]),
    socialLinks: zod_1.z.record(zod_1.z.string(), zod_1.z.string().url()).optional().default({}),
}).omit({
    id: true,
    userId: true,
    createdAt: true,
    updatedAt: true,
});
exports.updateIdentitySchema = exports.insertIdentitySchema.partial();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,