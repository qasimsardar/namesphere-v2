{"file":"/home/runner/workspace/server/replitAuth.ts","mappings":"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","names":[],"sources":["/home/runner/workspace/server/replitAuth.ts"],"sourcesContent":["import * as client from \"openid-client\";\nimport { Strategy, type VerifyFunction } from \"openid-client/passport\";\nimport { Strategy as LocalStrategy } from \"passport-local\";\nimport bcrypt from \"bcryptjs\";\n\nimport passport from \"passport\";\nimport session from \"express-session\";\nimport type { Express, RequestHandler } from \"express\";\nimport memoize from \"memoizee\";\nimport connectPg from \"connect-pg-simple\";\nimport { storage } from \"./storage\";\nimport { registerSchema, loginSchema, type RegisterInput, type LoginInput } from \"@shared/schema\";\nimport { fromZodError } from \"zod-validation-error\";\n\nif (!process.env.REPLIT_DOMAINS) {\n  throw new Error(\"Environment variable REPLIT_DOMAINS not provided\");\n}\n\nconst getOidcConfig = memoize(\n  async () => {\n    return await client.discovery(\n      new URL(process.env.ISSUER_URL ?? \"https://replit.com/oidc\"),\n      process.env.REPL_ID!\n    );\n  },\n  { maxAge: 3600 * 1000 }\n);\n\nexport function getSession() {\n  const sessionTtl = 7 * 24 * 60 * 60 * 1000; // 1 week\n  const pgStore = connectPg(session);\n  const sessionStore = new pgStore({\n    conString: process.env.DATABASE_URL,\n    createTableIfMissing: false,\n    ttl: sessionTtl,\n    tableName: \"sessions\",\n  });\n  return session({\n    secret: process.env.SESSION_SECRET!,\n    store: sessionStore,\n    resave: false,\n    saveUninitialized: false,\n    cookie: {\n      httpOnly: true,\n      secure: process.env.NODE_ENV === \"production\",\n      sameSite: 'lax',\n      maxAge: sessionTtl,\n    },\n  });\n}\n\nfunction updateUserSession(\n  user: any,\n  tokens: client.TokenEndpointResponse & client.TokenEndpointResponseHelpers\n) {\n  user.claims = tokens.claims();\n  user.access_token = tokens.access_token;\n  user.refresh_token = tokens.refresh_token;\n  user.expires_at = user.claims?.exp;\n}\n\n// Helper function to create user session for both auth types\nfunction createUserSession(user: any, authProvider: string, additionalData?: any) {\n  return {\n    ...user,\n    authProvider,\n    ...additionalData\n  };\n}\n\n// Helper function for Replit Auth user upsert\nasync function upsertReplitUser(claims: any) {\n  await storage.upsertUser({\n    id: claims[\"sub\"],\n    email: claims[\"email\"],\n    firstName: claims[\"first_name\"],\n    lastName: claims[\"last_name\"],\n    profileImageUrl: claims[\"profile_image_url\"],\n    authProvider: \"replit\",\n  });\n}\n\n// Helper function to hash passwords\nexport async function hashPassword(password: string): Promise<string> {\n  return await bcrypt.hash(password, 12);\n}\n\n// Helper function to verify passwords\nexport async function verifyPassword(password: string, hash: string): Promise<boolean> {\n  return await bcrypt.compare(password, hash);\n}\n\nexport async function setupAuth(app: Express) {\n  app.set(\"trust proxy\", 1);\n  app.use(getSession());\n  app.use(passport.initialize());\n  app.use(passport.session());\n\n  const config = await getOidcConfig();\n\n  const verify: VerifyFunction = async (\n    tokens: client.TokenEndpointResponse & client.TokenEndpointResponseHelpers,\n    verified: passport.AuthenticateCallback\n  ) => {\n    const user = {};\n    updateUserSession(user, tokens);\n    await upsertReplitUser(tokens.claims());\n    verified(null, user);\n  };\n\n  for (const domain of process.env\n    .REPLIT_DOMAINS!.split(\",\")) {\n    const strategy = new Strategy(\n      {\n        name: `replitauth:${domain}`,\n        config,\n        scope: \"openid email profile offline_access\",\n        callbackURL: `https://${domain}/api/callback`,\n      },\n      verify,\n    );\n    passport.use(strategy);\n  }\n\n  // Local strategy for username/password authentication\n  passport.use(new LocalStrategy(\n    async (username: string, password: string, done) => {\n      try {\n        const credentials = await storage.getUserCredentialsByUsername(username);\n        if (!credentials) {\n          return done(null, false, { message: \"Invalid username or password\" });\n        }\n\n        const isValidPassword = await verifyPassword(password, credentials.passwordHash);\n        if (!isValidPassword) {\n          return done(null, false, { message: \"Invalid username or password\" });\n        }\n\n        const user = await storage.getUser(credentials.userId);\n        if (!user) {\n          return done(null, false, { message: \"User not found\" });\n        }\n\n        const sessionUser = createUserSession(user, \"local\", { credentialsId: credentials.id });\n        return done(null, sessionUser);\n      } catch (error) {\n        return done(error);\n      }\n    }\n  ));\n\n  passport.serializeUser((user: Express.User, cb) => cb(null, user));\n  passport.deserializeUser((user: Express.User, cb) => cb(null, user));\n\n  app.get(\"/api/login\", (req, res, next) => {\n    passport.authenticate(`replitauth:${req.hostname}`, {\n      prompt: \"login consent\",\n      scope: [\"openid\", \"email\", \"profile\", \"offline_access\"],\n    })(req, res, next);\n  });\n\n  app.get(\"/api/callback\", (req, res, next) => {\n    passport.authenticate(`replitauth:${req.hostname}`, (err: any, user: any) => {\n      if (err) {\n        console.error(\"OIDC Authentication error:\", err);\n        return res.redirect(\"/api/login\");\n      }\n      \n      if (!user) {\n        return res.redirect(\"/api/login\");\n      }\n      \n      // Regenerate session for security (prevent session fixation)\n      req.session.regenerate((sessionErr) => {\n        if (sessionErr) {\n          console.error(\"Session regeneration error:\", sessionErr);\n          return res.redirect(\"/api/login\");\n        }\n        req.login(user, (loginErr) => {\n          if (loginErr) {\n            console.error(\"Login error:\", loginErr);\n            return res.redirect(\"/api/login\");\n          }\n          req.session.save((saveErr) => {\n            if (saveErr) {\n              console.error(\"Session save error:\", saveErr);\n              return res.redirect(\"/api/login\");\n            }\n            res.redirect(\"/\");\n          });\n        });\n      });\n    })(req, res, next);\n  });\n\n  app.get(\"/api/logout\", (req, res) => {\n    const user = req.user as any;\n    req.logout(() => {\n      req.session.destroy((err) => {\n        if (err) {\n          console.error(\"Session destroy error:\", err);\n        }\n        if (user?.authProvider === \"replit\") {\n          res.redirect(\n            client.buildEndSessionUrl(config, {\n              client_id: process.env.REPL_ID!,\n              post_logout_redirect_uri: `${req.protocol}://${req.hostname}`,\n            }).href\n          );\n        } else {\n          res.redirect(\"/\");\n        }\n      });\n    });\n  });\n\n  // Registration endpoint\n  app.post(\"/api/register\", async (req, res) => {\n    try {\n      const validatedData = registerSchema.parse(req.body);\n      \n      // Check if username already exists\n      const existingCreds = await storage.getUserCredentialsByUsername(validatedData.username);\n      if (existingCreds) {\n        return res.status(400).json({ \n          message: \"Username already exists\",\n          errors: { username: \"This username is already taken\" }\n        });\n      }\n\n      // Check if email already exists\n      const existingUser = await storage.getUserByEmail(validatedData.email);\n      if (existingUser) {\n        return res.status(400).json({ \n          message: \"Email already exists\",\n          errors: { email: \"This email is already registered\" }\n        });\n      }\n\n      // Create user and credentials\n      const hashedPassword = await hashPassword(validatedData.password);\n      \n      const user = await storage.upsertUser({\n        email: validatedData.email,\n        firstName: validatedData.firstName,\n        lastName: validatedData.lastName,\n        authProvider: \"local\"\n      });\n\n      const credentials = await storage.createUserCredentials({\n        userId: user.id,\n        username: validatedData.username,\n        passwordHash: hashedPassword\n      });\n\n      // Log in the user automatically with session regeneration\n      const sessionUser = createUserSession(user, \"local\", { credentialsId: credentials.id });\n      \n      req.session.regenerate((err) => {\n        if (err) {\n          console.error(\"Session regeneration error:\", err);\n          return res.status(500).json({ message: \"Registration successful but session creation failed\" });\n        }\n        \n        req.login(sessionUser, (loginErr) => {\n          if (loginErr) {\n            console.error(\"Login error:\", loginErr);\n            return res.status(500).json({ message: \"Registration successful but login failed\" });\n          }\n          \n          req.session.save((saveErr) => {\n            if (saveErr) {\n              console.error(\"Session save error:\", saveErr);\n              return res.status(500).json({ message: \"Registration successful but session save failed\" });\n            }\n            \n            res.status(201).json({\n              message: \"Registration successful\",\n              user: {\n                id: user.id,\n                email: user.email,\n                firstName: user.firstName,\n                lastName: user.lastName,\n                authProvider: \"local\"\n              }\n            });\n          });\n        });\n      });\n    } catch (error: any) {\n      if (error.name === 'ZodError') {\n        const validationError = fromZodError(error);\n        return res.status(400).json({\n          message: \"Validation failed\",\n          errors: validationError.details\n        });\n      }\n      console.error(\"Registration error:\", error);\n      res.status(500).json({ message: \"Internal server error\" });\n    }\n  });\n\n  // Local login endpoint\n  app.post(\"/api/login/local\", (req, res, next) => {\n    try {\n      const validatedData = loginSchema.parse(req.body);\n      \n      passport.authenticate(\"local\", (err: any, user: any, info: any) => {\n        if (err) {\n          console.error(\"Authentication error:\", err);\n          return res.status(500).json({ message: \"Authentication error\" });\n        }\n        \n        if (!user) {\n          return res.status(401).json({ \n            message: info?.message || \"Invalid username or password\"\n          });\n        }\n        \n        req.session.regenerate((sessionErr) => {\n          if (sessionErr) {\n            console.error(\"Session regeneration error:\", sessionErr);\n            return res.status(500).json({ message: \"Session creation failed\" });\n          }\n          req.login(user, (loginErr) => {\n            if (loginErr) {\n              console.error(\"Login error:\", loginErr);\n              return res.status(500).json({ message: \"Login failed\" });\n            }\n            req.session.save((saveErr) => {\n              if (saveErr) {\n                console.error(\"Session save error:\", saveErr);\n                return res.status(500).json({ message: \"Login successful but session save failed\" });\n              }\n              res.json({\n                message: \"Login successful\",\n                user: {\n                  id: user.id,\n                  email: user.email,\n                  firstName: user.firstName,\n                  lastName: user.lastName,\n                  authProvider: user.authProvider\n                }\n              });\n            });\n          });\n        });\n      })(req, res, next);\n    } catch (error: any) {\n      if (error.name === 'ZodError') {\n        const validationError = fromZodError(error);\n        return res.status(400).json({\n          message: \"Validation failed\",\n          errors: validationError.details\n        });\n      }\n      res.status(500).json({ message: \"Internal server error\" });\n    }\n  });\n}\n\nexport const isAuthenticated: RequestHandler = async (req, res, next) => {\n  const user = req.user as any;\n\n  if (!req.isAuthenticated()) {\n    return res.status(401).json({ message: \"Unauthorized\" });\n  }\n\n  // For local auth users, we don't need token refresh logic\n  if (user.authProvider === \"local\") {\n    return next();\n  }\n\n  // For Replit auth users, handle token refresh\n  if (!user.expires_at) {\n    return res.status(401).json({ message: \"Unauthorized\" });\n  }\n\n  const now = Math.floor(Date.now() / 1000);\n  if (now <= user.expires_at) {\n    return next();\n  }\n\n  const refreshToken = user.refresh_token;\n  if (!refreshToken) {\n    res.status(401).json({ message: \"Unauthorized\" });\n    return;\n  }\n\n  try {\n    const config = await getOidcConfig();\n    const tokenResponse = await client.refreshTokenGrant(config, refreshToken);\n    updateUserSession(user, tokenResponse);\n    return next();\n  } catch (error) {\n    res.status(401).json({ message: \"Unauthorized\" });\n    return;\n  }\n};\n"],"version":3}