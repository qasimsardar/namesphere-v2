b99669bd51ebda002ef3ed2f78c120ed
"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.isAuthenticated = void 0;
exports.getSession = getSession;
exports.hashPassword = hashPassword;
exports.verifyPassword = verifyPassword;
exports.setupAuth = setupAuth;
const client = __importStar(require("openid-client"));
const passport_1 = require("openid-client/passport");
const passport_local_1 = require("passport-local");
const bcryptjs_1 = __importDefault(require("bcryptjs"));
const passport_2 = __importDefault(require("passport"));
const express_session_1 = __importDefault(require("express-session"));
const memoizee_1 = __importDefault(require("memoizee"));
const connect_pg_simple_1 = __importDefault(require("connect-pg-simple"));
const storage_1 = require("./storage");
const schema_1 = require("@shared/schema");
const zod_validation_error_1 = require("zod-validation-error");
if (!process.env.REPLIT_DOMAINS) {
    throw new Error("Environment variable REPLIT_DOMAINS not provided");
}
const getOidcConfig = (0, memoizee_1.default)(async () => {
    return await client.discovery(new URL(process.env.ISSUER_URL ?? "https://replit.com/oidc"), process.env.REPL_ID);
}, { maxAge: 3600 * 1000 });
function getSession() {
    const sessionTtl = 7 * 24 * 60 * 60 * 1000; // 1 week
    const pgStore = (0, connect_pg_simple_1.default)(express_session_1.default);
    const sessionStore = new pgStore({
        conString: process.env.DATABASE_URL,
        createTableIfMissing: false,
        ttl: sessionTtl,
        tableName: "sessions",
    });
    return (0, express_session_1.default)({
        secret: process.env.SESSION_SECRET,
        store: sessionStore,
        resave: false,
        saveUninitialized: false,
        cookie: {
            httpOnly: true,
            secure: process.env.NODE_ENV === "production",
            sameSite: 'lax',
            maxAge: sessionTtl,
        },
    });
}
function updateUserSession(user, tokens) {
    user.claims = tokens.claims();
    user.access_token = tokens.access_token;
    user.refresh_token = tokens.refresh_token;
    user.expires_at = user.claims?.exp;
}
// Helper function to create user session for both auth types
function createUserSession(user, authProvider, additionalData) {
    return {
        ...user,
        authProvider,
        ...additionalData
    };
}
// Helper function for Replit Auth user upsert
async function upsertReplitUser(claims) {
    await storage_1.storage.upsertUser({
        id: claims["sub"],
        email: claims["email"],
        firstName: claims["first_name"],
        lastName: claims["last_name"],
        profileImageUrl: claims["profile_image_url"],
        authProvider: "replit",
    });
}
// Helper function to hash passwords
async function hashPassword(password) {
    return await bcryptjs_1.default.hash(password, 12);
}
// Helper function to verify passwords
async function verifyPassword(password, hash) {
    return await bcryptjs_1.default.compare(password, hash);
}
async function setupAuth(app) {
    app.set("trust proxy", 1);
    app.use(getSession());
    app.use(passport_2.default.initialize());
    app.use(passport_2.default.session());
    const config = await getOidcConfig();
    const verify = async (tokens, verified) => {
        const user = {};
        updateUserSession(user, tokens);
        await upsertReplitUser(tokens.claims());
        verified(null, user);
    };
    for (const domain of process.env
        .REPLIT_DOMAINS.split(",")) {
        const strategy = new passport_1.Strategy({
            name: `replitauth:${domain}`,
            config,
            scope: "openid email profile offline_access",
            callbackURL: `https://${domain}/api/callback`,
        }, verify);
        passport_2.default.use(strategy);
    }
    // Local strategy for username/password authentication
    passport_2.default.use(new passport_local_1.Strategy(async (username, password, done) => {
        try {
            const credentials = await storage_1.storage.getUserCredentialsByUsername(username);
            if (!credentials) {
                return done(null, false, { message: "Invalid username or password" });
            }
            const isValidPassword = await verifyPassword(password, credentials.passwordHash);
            if (!isValidPassword) {
                return done(null, false, { message: "Invalid username or password" });
            }
            const user = await storage_1.storage.getUser(credentials.userId);
            if (!user) {
                return done(null, false, { message: "User not found" });
            }
            const sessionUser = createUserSession(user, "local", { credentialsId: credentials.id });
            return done(null, sessionUser);
        }
        catch (error) {
            return done(error);
        }
    }));
    passport_2.default.serializeUser((user, cb) => cb(null, user));
    passport_2.default.deserializeUser((user, cb) => cb(null, user));
    app.get("/api/login", (req, res, next) => {
        passport_2.default.authenticate(`replitauth:${req.hostname}`, {
            prompt: "login consent",
            scope: ["openid", "email", "profile", "offline_access"],
        })(req, res, next);
    });
    app.get("/api/callback", (req, res, next) => {
        passport_2.default.authenticate(`replitauth:${req.hostname}`, (err, user) => {
            if (err) {
                console.error("OIDC Authentication error:", err);
                return res.redirect("/api/login");
            }
            if (!user) {
                return res.redirect("/api/login");
            }
            // Regenerate session for security (prevent session fixation)
            req.session.regenerate((sessionErr) => {
                if (sessionErr) {
                    console.error("Session regeneration error:", sessionErr);
                    return res.redirect("/api/login");
                }
                req.login(user, (loginErr) => {
                    if (loginErr) {
                        console.error("Login error:", loginErr);
                        return res.redirect("/api/login");
                    }
                    req.session.save((saveErr) => {
                        if (saveErr) {
                            console.error("Session save error:", saveErr);
                            return res.redirect("/api/login");
                        }
                        res.redirect("/");
                    });
                });
            });
        })(req, res, next);
    });
    app.get("/api/logout", (req, res) => {
        const user = req.user;
        req.logout(() => {
            req.session.destroy((err) => {
                if (err) {
                    console.error("Session destroy error:", err);
                }
                if (user?.authProvider === "replit") {
                    res.redirect(client.buildEndSessionUrl(config, {
                        client_id: process.env.REPL_ID,
                        post_logout_redirect_uri: `${req.protocol}://${req.hostname}`,
                    }).href);
                }
                else {
                    res.redirect("/");
                }
            });
        });
    });
    // Registration endpoint
    app.post("/api/register", async (req, res) => {
        try {
            const validatedData = schema_1.registerSchema.parse(req.body);
            // Check if username already exists
            const existingCreds = await storage_1.storage.getUserCredentialsByUsername(validatedData.username);
            if (existingCreds) {
                return res.status(400).json({
                    message: "Username already exists",
                    errors: { username: "This username is already taken" }
                });
            }
            // Check if email already exists
            const existingUser = await storage_1.storage.getUserByEmail(validatedData.email);
            if (existingUser) {
                return res.status(400).json({
                    message: "Email already exists",
                    errors: { email: "This email is already registered" }
                });
            }
            // Create user and credentials
            const hashedPassword = await hashPassword(validatedData.password);
            const user = await storage_1.storage.upsertUser({
                email: validatedData.email,
                firstName: validatedData.firstName,
                lastName: validatedData.lastName,
                authProvider: "local"
            });
            const credentials = await storage_1.storage.createUserCredentials({
                userId: user.id,
                username: validatedData.username,
                passwordHash: hashedPassword
            });
            // Log in the user automatically with session regeneration
            const sessionUser = createUserSession(user, "local", { credentialsId: credentials.id });
            req.session.regenerate((err) => {
                if (err) {
                    console.error("Session regeneration error:", err);
                    return res.status(500).json({ message: "Registration successful but session creation failed" });
                }
                req.login(sessionUser, (loginErr) => {
                    if (loginErr) {
                        console.error("Login error:", loginErr);
                        return res.status(500).json({ message: "Registration successful but login failed" });
                    }
                    req.session.save((saveErr) => {
                        if (saveErr) {
                            console.error("Session save error:", saveErr);
                            return res.status(500).json({ message: "Registration successful but session save failed" });
                        }
                        res.status(201).json({
                            message: "Registration successful",
                            user: {
                                id: user.id,
                                email: user.email,
                                firstName: user.firstName,
                                lastName: user.lastName,
                                authProvider: "local"
                            }
                        });
                    });
                });
            });
        }
        catch (error) {
            if (error.name === 'ZodError') {
                const validationError = (0, zod_validation_error_1.fromZodError)(error);
                return res.status(400).json({
                    message: "Validation failed",
                    errors: validationError.details
                });
            }
            console.error("Registration error:", error);
            res.status(500).json({ message: "Internal server error" });
        }
    });
    // Local login endpoint
    app.post("/api/login/local", (req, res, next) => {
        try {
            const validatedData = schema_1.loginSchema.parse(req.body);
            passport_2.default.authenticate("local", (err, user, info) => {
                if (err) {
                    console.error("Authentication error:", err);
                    return res.status(500).json({ message: "Authentication error" });
                }
                if (!user) {
                    return res.status(401).json({
                        message: info?.message || "Invalid username or password"
                    });
                }
                req.session.regenerate((sessionErr) => {
                    if (sessionErr) {
                        console.error("Session regeneration error:", sessionErr);
                        return res.status(500).json({ message: "Session creation failed" });
                    }
                    req.login(user, (loginErr) => {
                        if (loginErr) {
                            console.error("Login error:", loginErr);
                            return res.status(500).json({ message: "Login failed" });
                        }
                        req.session.save((saveErr) => {
                            if (saveErr) {
                                console.error("Session save error:", saveErr);
                                return res.status(500).json({ message: "Login successful but session save failed" });
                            }
                            res.json({
                                message: "Login successful",
                                user: {
                                    id: user.id,
                                    email: user.email,
                                    firstName: user.firstName,
                                    lastName: user.lastName,
                                    authProvider: user.authProvider
                                }
                            });
                        });
                    });
                });
            })(req, res, next);
        }
        catch (error) {
            if (error.name === 'ZodError') {
                const validationError = (0, zod_validation_error_1.fromZodError)(error);
                return res.status(400).json({
                    message: "Validation failed",
                    errors: validationError.details
                });
            }
            res.status(500).json({ message: "Internal server error" });
        }
    });
}
const isAuthenticated = async (req, res, next) => {
    const user = req.user;
    if (!req.isAuthenticated()) {
        return res.status(401).json({ message: "Unauthorized" });
    }
    // For local auth users, we don't need token refresh logic
    if (user.authProvider === "local") {
        return next();
    }
    // For Replit auth users, handle token refresh
    if (!user.expires_at) {
        return res.status(401).json({ message: "Unauthorized" });
    }
    const now = Math.floor(Date.now() / 1000);
    if (now <= user.expires_at) {
        return next();
    }
    const refreshToken = user.refresh_token;
    if (!refreshToken) {
        res.status(401).json({ message: "Unauthorized" });
        return;
    }
    try {
        const config = await getOidcConfig();
        const tokenResponse = await client.refreshTokenGrant(config, refreshToken);
        updateUserSession(user, tokenResponse);
        return next();
    }
    catch (error) {
        res.status(401).json({ message: "Unauthorized" });
        return;
    }
};
exports.isAuthenticated = isAuthenticated;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,