{"file":"/home/runner/workspace/server/routes.ts","mappings":"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","names":[],"sources":["/home/runner/workspace/server/routes.ts"],"sourcesContent":["import type { Express, Request, Response } from \"express\";\nimport { createServer, type Server } from \"http\";\nimport { storage } from \"./storage\";\nimport { setupAuth, isAuthenticated } from \"./replitAuth\";\nimport { insertIdentitySchema, updateIdentitySchema, type Identity } from \"@shared/schema\";\nimport { z } from \"zod\";\nimport { fromZodError } from \"zod-validation-error\";\n\n// Search validation schemas\nconst searchQuerySchema = z.object({\n  context: z.enum([\"work\", \"gaming\", \"social\", \"legal\"]),\n  q: z.string().min(0).max(100).optional().default(\"\"),\n  limit: z.coerce.number().min(1).max(50).optional().default(20),\n  cursor: z.string().optional(),\n});\n\ninterface AuthenticatedRequest extends Request {\n  user?: {\n    claims: {\n      sub: string;\n      email?: string;\n      first_name?: string;\n      last_name?: string;\n      profile_image_url?: string;\n    };\n  };\n}\n\n// Helper function to extract user ID from different auth providers\nfunction getUserId(authUser: any): string | null {\n  if (authUser?.authProvider === \"local\") {\n    return authUser.id;\n  } else if (authUser?.claims?.sub) {\n    return authUser.claims.sub;\n  }\n  return null;\n}\n\n// Content negotiation helpers\nfunction negotiateContent(req: Request): 'json' | 'json-api' | 'csv' | 'xml' {\n  const acceptHeader = req.headers.accept || 'application/json';\n  \n  if (acceptHeader.includes('application/vnd.api+json')) {\n    return 'json-api';\n  } else if (acceptHeader.includes('text/csv')) {\n    return 'csv';\n  } else if (acceptHeader.includes('application/xml')) {\n    return 'xml';\n  } else {\n    return 'json';\n  }\n}\n\nfunction formatResponse(data: any, format: 'json' | 'json-api' | 'csv' | 'xml', req: Request): { content: string; contentType: string } {\n  switch (format) {\n    case 'json-api':\n      return {\n        content: JSON.stringify(formatAsJsonApi(data, req)),\n        contentType: 'application/vnd.api+json'\n      };\n    case 'csv':\n      return {\n        content: formatAsCsv(data),\n        contentType: 'text/csv; charset=utf-8'\n      };\n    case 'xml':\n      return {\n        content: formatAsXml(data),\n        contentType: 'application/xml; charset=utf-8'\n      };\n    default:\n      return {\n        content: JSON.stringify(data),\n        contentType: 'application/json'\n      };\n  }\n}\n\nfunction formatAsJsonApi(data: any, req: Request): any {\n  const baseUrl = `${req.protocol}://${req.get('host')}`;\n  \n  if (Array.isArray(data.identities)) {\n    // Multiple identities\n    const jsonApiData = data.identities.map((identity: Identity) => ({\n      type: 'identity',\n      id: identity.id,\n      attributes: {\n        personalName: identity.personalName,\n        context: identity.context,\n        otherNames: identity.otherNames,\n        pronouns: identity.pronouns,\n        title: identity.title,\n        avatarUrl: identity.avatarUrl,\n        socialLinks: identity.socialLinks,\n        isPrimary: identity.isPrimary,\n        createdAt: identity.createdAt,\n        updatedAt: identity.updatedAt\n      },\n      links: {\n        self: `${baseUrl}/api/identities/${identity.id}`\n      }\n    }));\n\n    return {\n      data: jsonApiData,\n      meta: {\n        total: jsonApiData.length,\n        primary: data.primary ? data.primary.id : null\n      },\n      links: {\n        self: `${baseUrl}${req.originalUrl}`\n      }\n    };\n  } else if (data.id) {\n    // Single identity\n    return {\n      data: {\n        type: 'identity',\n        id: data.id,\n        attributes: {\n          personalName: data.personalName,\n          context: data.context,\n          otherNames: data.otherNames,\n          pronouns: data.pronouns,\n          title: data.title,\n          avatarUrl: data.avatarUrl,\n          socialLinks: data.socialLinks,\n          isPrimary: data.isPrimary,\n          createdAt: data.createdAt,\n          updatedAt: data.updatedAt\n        },\n        links: {\n          self: `${baseUrl}/api/identities/${data.id}`\n        }\n      }\n    };\n  } else {\n    return { data };\n  }\n}\n\nfunction escapeCsv(value: string): string {\n  // Prevent CSV formula injection by prefixing with single quote if starts with formula chars\n  if (value.startsWith('=') || value.startsWith('+') || value.startsWith('-') || value.startsWith('@')) {\n    value = \"'\" + value;\n  }\n  \n  if (value.includes(',') || value.includes('\\n') || value.includes('\\r') || value.includes('\"')) {\n    return `\"${value.replace(/\"/g, '\"\"')}\"`;\n  }\n  return value;\n}\n\nfunction formatAsCsv(data: any): string {\n  let identities = [];\n  if (Array.isArray(data.identities)) {\n    identities = data.identities;\n  } else if (data.id) {\n    identities = [data];\n  } else {\n    // Handle error responses properly for CSV\n    const message = data.message || 'No data available';\n    return `error\\n\"${escapeCsv(message)}\"`;\n  }\n\n  if (identities.length === 0) {\n    return 'error\\n\"No identities found\"';\n  }\n\n  const headers = ['id', 'personalName', 'context', 'otherNames', 'pronouns', 'title', 'avatarUrl', 'socialLinks', 'isPrimary', 'createdAt', 'updatedAt'];\n  const csvRows = [headers.join(',')];\n\n  identities.forEach((identity: Identity) => {\n    const row = [\n      escapeCsv(identity.id || ''),\n      escapeCsv(identity.personalName || ''),\n      escapeCsv(identity.context || ''),\n      escapeCsv((identity.otherNames || []).join('; ')),\n      escapeCsv(identity.pronouns || ''),\n      escapeCsv(identity.title || ''),\n      escapeCsv(identity.avatarUrl || ''),\n      escapeCsv(identity.socialLinks ? JSON.stringify(identity.socialLinks) : ''),\n      identity.isPrimary ? 'true' : 'false',\n      escapeCsv(identity.createdAt ? identity.createdAt.toString() : ''),\n      escapeCsv(identity.updatedAt ? identity.updatedAt.toString() : '')\n    ];\n    csvRows.push(row.join(','));\n  });\n\n  return csvRows.join('\\n');\n}\n\nfunction escapeXml(text: string): string {\n  return text\n    .replace(/&/g, '&amp;')\n    .replace(/</g, '&lt;')\n    .replace(/>/g, '&gt;')\n    .replace(/\"/g, '&quot;')\n    .replace(/'/g, '&#39;');\n}\n\nfunction safeCdata(text: string): string {\n  // Handle CDATA edge case - if text contains \"]]>\", we need to split it\n  if (text.includes(']]>')) {\n    const parts = text.split(']]>');\n    return parts.map(part => `<![CDATA[${part}]]>`).join(']]&gt;');\n  }\n  return `<![CDATA[${text}]]>`;\n}\n\nfunction formatAsXml(data: any): string {\n  let identities = [];\n  if (Array.isArray(data.identities)) {\n    identities = data.identities;\n  } else if (data.id) {\n    identities = [data];\n  } else {\n    // Handle error responses properly for XML\n    const message = data.message || 'No data available';\n    return `<?xml version=\"1.0\" encoding=\"UTF-8\"?><response><error><message>${safeCdata(message)}</message></error></response>`;\n  }\n\n  const xmlLines = ['<?xml version=\"1.0\" encoding=\"UTF-8\"?>', '<identities>'];\n  \n  identities.forEach((identity: Identity) => {\n    xmlLines.push('  <identity>');\n    xmlLines.push(`    <id>${safeCdata(identity.id || '')}</id>`);\n    xmlLines.push(`    <personalName>${safeCdata(identity.personalName || '')}</personalName>`);\n    xmlLines.push(`    <context>${safeCdata(identity.context || '')}</context>`);\n    \n    if (identity.otherNames && identity.otherNames.length > 0) {\n      xmlLines.push('    <otherNames>');\n      identity.otherNames.forEach(name => {\n        xmlLines.push(`      <name>${safeCdata(name)}</name>`);\n      });\n      xmlLines.push('    </otherNames>');\n    }\n    \n    if (identity.pronouns) xmlLines.push(`    <pronouns>${safeCdata(identity.pronouns)}</pronouns>`);\n    if (identity.title) xmlLines.push(`    <title>${safeCdata(identity.title)}</title>`);\n    if (identity.avatarUrl) xmlLines.push(`    <avatarUrl>${safeCdata(identity.avatarUrl)}</avatarUrl>`);\n    \n    if (identity.socialLinks && Object.keys(identity.socialLinks).length > 0) {\n      xmlLines.push('    <socialLinks>');\n      Object.entries(identity.socialLinks as Record<string, string>).forEach(([platform, url]) => {\n        xmlLines.push(`      <link platform=\"${escapeXml(platform)}\">${safeCdata(url)}</link>`);\n      });\n      xmlLines.push('    </socialLinks>');\n    }\n    \n    xmlLines.push(`    <isPrimary>${identity.isPrimary ? 'true' : 'false'}</isPrimary>`);\n    xmlLines.push(`    <createdAt>${safeCdata(identity.createdAt ? identity.createdAt.toString() : '')}</createdAt>`);\n    xmlLines.push(`    <updatedAt>${safeCdata(identity.updatedAt ? identity.updatedAt.toString() : '')}</updatedAt>`);\n    xmlLines.push('  </identity>');\n  });\n  \n  xmlLines.push('</identities>');\n  return xmlLines.join('\\n');\n}\n\n// Helper function to send formatted responses based on Accept header\nfunction sendFormattedResponse(res: Response, data: any, req: Request, statusCode: number = 200) {\n  const format = negotiateContent(req);\n  const { content, contentType } = formatResponse(data, format, req);\n  \n  res.status(statusCode)\n    .set('Content-Type', contentType)\n    .send(content);\n}\n\nexport async function registerRoutes(app: Express): Promise<Server> {\n  // Setup authentication\n  await setupAuth(app);\n\n  // Auth routes\n  app.get('/api/auth/user', isAuthenticated, async (req, res) => {\n    try {\n      const authUser = req.user as any;\n      const userId = getUserId(authUser);\n      if (!userId) {\n        return res.status(401).json({ message: \"Unauthorized\" });\n      }\n      \n      const user = await storage.getUser(userId);\n      if (!user) {\n        return res.status(404).json({ message: \"User not found\" });\n      }\n      res.json(user);\n    } catch (error) {\n      console.error(\"Error fetching user:\", error);\n      res.status(500).json({ message: \"Failed to fetch user\" });\n    }\n  });\n\n  // Identity routes with content negotiation\n  app.get('/api/identities', isAuthenticated, async (req, res) => {\n    try {\n      const authUser = req.user as any;\n      const userId = getUserId(authUser);\n      if (!userId) {\n        return sendFormattedResponse(res, { message: \"Unauthorized\" }, req, 401);\n      }\n      const context = req.query.context as string | undefined;\n      \n      const identities = await storage.getIdentities(userId, context);\n      \n      let responseData;\n      if (context) {\n        // Return only identities matching the context\n        responseData = { identities };\n      } else {\n        // Return primary identity first, then all others\n        const primaryIdentity = identities.find(i => i.isPrimary);\n        if (primaryIdentity) {\n          responseData = { \n            primary: primaryIdentity,\n            identities: identities \n          };\n        } else {\n          responseData = { identities };\n        }\n      }\n      \n      sendFormattedResponse(res, responseData, req);\n    } catch (error) {\n      console.error(\"Error fetching identities:\", error);\n      sendFormattedResponse(res, { message: \"Failed to fetch identities\" }, req, 500);\n    }\n  });\n\n  app.get('/api/identities/:id', isAuthenticated, async (req, res) => {\n    try {\n      const authUser = req.user as any;\n      const userId = getUserId(authUser);\n      if (!userId) {\n        return res.status(401).json({ message: \"Unauthorized\" });\n      }\n      const { id } = req.params;\n      \n      const identity = await storage.getIdentity(id, userId);\n      if (!identity) {\n        return sendFormattedResponse(res, { message: \"Identity not found\" }, req, 404);\n      }\n      \n      sendFormattedResponse(res, identity, req);\n    } catch (error) {\n      console.error(\"Error fetching identity:\", error);\n      sendFormattedResponse(res, { message: \"Failed to fetch identity\" }, req, 500);\n    }\n  });\n\n  app.post('/api/identities', isAuthenticated, async (req, res) => {\n    try {\n      const authUser = req.user as any;\n      const userId = getUserId(authUser);\n      if (!userId) {\n        return res.status(401).json({ message: \"Unauthorized\" });\n      }\n      \n      // Validate request body\n      const validation = insertIdentitySchema.safeParse(req.body);\n      if (!validation.success) {\n        const error = fromZodError(validation.error);\n        return res.status(400).json({ \n          message: \"Validation error\", \n          details: error.message \n        });\n      }\n\n      const identityData = validation.data;\n      \n      // Check for existing primary if this should be primary\n      if (identityData.isPrimary) {\n        const existingPrimary = await storage.getPrimaryIdentity(userId);\n        if (existingPrimary) {\n          identityData.isPrimary = true; // Will be handled in storage transaction\n        }\n      }\n\n      const identity = await storage.createIdentity(userId, identityData);\n      res.status(201).json(identity);\n    } catch (error) {\n      console.error(\"Error creating identity:\", error);\n      res.status(500).json({ message: \"Failed to create identity\" });\n    }\n  });\n\n  const updateIdentityHandler = async (req: Request, res: Response) => {\n    try {\n      const authUser = req.user as any;\n      const userId = getUserId(authUser);\n      if (!userId) {\n        return res.status(401).json({ message: \"Unauthorized\" });\n      }\n      const { id } = req.params;\n      \n      console.log(`[${req.method}] /api/identities/${id} - User: ${userId}, Body:`, JSON.stringify(req.body, null, 2));\n      \n      // Validate request body\n      const validation = updateIdentitySchema.safeParse(req.body);\n      if (!validation.success) {\n        const error = fromZodError(validation.error);\n        console.error(\"Validation error:\", error.message);\n        return res.status(400).json({ \n          message: \"Validation error\", \n          details: error.message \n        });\n      }\n\n      const updates = validation.data;\n      console.log(\"Validated updates:\", JSON.stringify(updates, null, 2));\n      \n      const identity = await storage.updateIdentity(id, userId, updates);\n      \n      if (!identity) {\n        console.log(\"Identity not found for id:\", id, \"userId:\", userId);\n        return res.status(404).json({ message: \"Identity not found\" });\n      }\n      \n      console.log(\"Updated identity:\", JSON.stringify(identity, null, 2));\n      res.json(identity);\n    } catch (error) {\n      console.error(\"Error updating identity:\", error);\n      res.status(500).json({ message: \"Failed to update identity\" });\n    }\n  };\n\n  app.put('/api/identities/:id', isAuthenticated, updateIdentityHandler);\n  app.patch('/api/identities/:id', isAuthenticated, updateIdentityHandler);\n\n  app.delete('/api/identities/:id', isAuthenticated, async (req, res) => {\n    try {\n      const authUser = req.user as any;\n      const userId = getUserId(authUser);\n      if (!userId) {\n        return res.status(401).json({ message: \"Unauthorized\" });\n      }\n      const { id } = req.params;\n      \n      // Check if this is the only identity\n      const allIdentities = await storage.getIdentities(userId);\n      if (allIdentities.length === 1) {\n        return res.status(400).json({ \n          message: \"Cannot delete your only identity\" \n        });\n      }\n      \n      const success = await storage.deleteIdentity(id, userId);\n      if (!success) {\n        return res.status(404).json({ message: \"Identity not found\" });\n      }\n      \n      res.status(204).send();\n    } catch (error) {\n      console.error(\"Error deleting identity:\", error);\n      res.status(500).json({ message: \"Failed to delete identity\" });\n    }\n  });\n\n  app.post('/api/identities/:id/set-primary', isAuthenticated, async (req, res) => {\n    try {\n      const authUser = req.user as any;\n      const userId = getUserId(authUser);\n      if (!userId) {\n        return res.status(401).json({ message: \"Unauthorized\" });\n      }\n      const { id } = req.params;\n      \n      const identity = await storage.setPrimaryIdentity(id, userId);\n      if (!identity) {\n        return res.status(404).json({ message: \"Identity not found\" });\n      }\n      \n      res.json(identity);\n    } catch (error) {\n      console.error(\"Error setting primary identity:\", error);\n      res.status(500).json({ message: \"Failed to set primary identity\" });\n    }\n  });\n\n  // Public search endpoints\n  app.get('/api/public/identities/search', isAuthenticated, async (req, res) => {\n    try {\n      const authUser = req.user as any;\n      const requestingUserId = getUserId(authUser);\n      if (!requestingUserId) {\n        return res.status(401).json({ message: \"Unauthorized\" });\n      }\n\n      // Validate query parameters\n      const validation = searchQuerySchema.safeParse(req.query);\n      if (!validation.success) {\n        const error = fromZodError(validation.error);\n        return res.status(400).json({ \n          message: \"Validation error\", \n          details: error.message \n        });\n      }\n\n      const { context, q, limit, cursor } = validation.data;\n      \n      // Perform search\n      const searchResult = await storage.searchPublicIdentities(context, q, limit, cursor);\n      \n      // Create audit log for search operation\n      await storage.createAuditLog({\n        userId: requestingUserId,\n        entity: \"identity\",\n        entityId: \"search\",\n        operation: \"search\",\n        diff: { context, query: q, resultCount: searchResult.identities.length },\n      });\n\n      res.json(searchResult);\n    } catch (error) {\n      console.error(\"Error searching public identities:\", error);\n      res.status(500).json({ message: \"Failed to search identities\" });\n    }\n  });\n\n  app.get('/api/public/identities/:id', isAuthenticated, async (req, res) => {\n    try {\n      const authUser = req.user as any;\n      const requestingUserId = getUserId(authUser);\n      if (!requestingUserId) {\n        return res.status(401).json({ message: \"Unauthorized\" });\n      }\n\n      const identityId = req.params.id;\n      if (!identityId) {\n        return res.status(400).json({ message: \"Identity ID is required\" });\n      }\n\n      // Get public identity\n      const identity = await storage.getPublicIdentity(identityId);\n      if (!identity) {\n        return res.status(404).json({ message: \"Identity not found or not discoverable\" });\n      }\n\n      // Create audit log for view-profile operation\n      await storage.createAuditLog({\n        userId: requestingUserId,\n        entity: \"identity\",\n        entityId: identityId,\n        operation: \"view-profile\",\n        diff: { viewedContext: identity.context },\n      });\n\n      res.json(identity);\n    } catch (error) {\n      console.error(\"Error fetching public identity:\", error);\n      res.status(500).json({ message: \"Failed to fetch identity\" });\n    }\n  });\n\n  const httpServer = createServer(app);\n  return httpServer;\n}\n"],"version":3}