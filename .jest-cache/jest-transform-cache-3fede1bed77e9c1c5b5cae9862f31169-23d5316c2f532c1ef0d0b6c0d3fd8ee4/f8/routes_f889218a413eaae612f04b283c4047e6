fe1a7f14c2cfae950688d0ac9c918e2b
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.registerRoutes = registerRoutes;
const http_1 = require("http");
const storage_1 = require("./storage");
const replitAuth_1 = require("./replitAuth");
const schema_1 = require("@shared/schema");
const zod_1 = require("zod");
const zod_validation_error_1 = require("zod-validation-error");
// Search validation schemas
const searchQuerySchema = zod_1.z.object({
    context: zod_1.z.enum(["work", "gaming", "social", "legal"]),
    q: zod_1.z.string().min(0).max(100).optional().default(""),
    limit: zod_1.z.coerce.number().min(1).max(50).optional().default(20),
    cursor: zod_1.z.string().optional(),
});
// Helper function to extract user ID from different auth providers
function getUserId(authUser) {
    if (authUser?.authProvider === "local") {
        return authUser.id;
    }
    else if (authUser?.claims?.sub) {
        return authUser.claims.sub;
    }
    return null;
}
// Content negotiation helpers
function negotiateContent(req) {
    const acceptHeader = req.headers.accept || 'application/json';
    if (acceptHeader.includes('application/vnd.api+json')) {
        return 'json-api';
    }
    else if (acceptHeader.includes('text/csv')) {
        return 'csv';
    }
    else if (acceptHeader.includes('application/xml')) {
        return 'xml';
    }
    else {
        return 'json';
    }
}
function formatResponse(data, format, req) {
    switch (format) {
        case 'json-api':
            return {
                content: JSON.stringify(formatAsJsonApi(data, req)),
                contentType: 'application/vnd.api+json'
            };
        case 'csv':
            return {
                content: formatAsCsv(data),
                contentType: 'text/csv; charset=utf-8'
            };
        case 'xml':
            return {
                content: formatAsXml(data),
                contentType: 'application/xml; charset=utf-8'
            };
        default:
            return {
                content: JSON.stringify(data),
                contentType: 'application/json'
            };
    }
}
function formatAsJsonApi(data, req) {
    const baseUrl = `${req.protocol}://${req.get('host')}`;
    if (Array.isArray(data.identities)) {
        // Multiple identities
        const jsonApiData = data.identities.map((identity) => ({
            type: 'identity',
            id: identity.id,
            attributes: {
                personalName: identity.personalName,
                context: identity.context,
                otherNames: identity.otherNames,
                pronouns: identity.pronouns,
                title: identity.title,
                avatarUrl: identity.avatarUrl,
                socialLinks: identity.socialLinks,
                isPrimary: identity.isPrimary,
                createdAt: identity.createdAt,
                updatedAt: identity.updatedAt
            },
            links: {
                self: `${baseUrl}/api/identities/${identity.id}`
            }
        }));
        return {
            data: jsonApiData,
            meta: {
                total: jsonApiData.length,
                primary: data.primary ? data.primary.id : null
            },
            links: {
                self: `${baseUrl}${req.originalUrl}`
            }
        };
    }
    else if (data.id) {
        // Single identity
        return {
            data: {
                type: 'identity',
                id: data.id,
                attributes: {
                    personalName: data.personalName,
                    context: data.context,
                    otherNames: data.otherNames,
                    pronouns: data.pronouns,
                    title: data.title,
                    avatarUrl: data.avatarUrl,
                    socialLinks: data.socialLinks,
                    isPrimary: data.isPrimary,
                    createdAt: data.createdAt,
                    updatedAt: data.updatedAt
                },
                links: {
                    self: `${baseUrl}/api/identities/${data.id}`
                }
            }
        };
    }
    else {
        return { data };
    }
}
function escapeCsv(value) {
    // Prevent CSV formula injection by prefixing with single quote if starts with formula chars
    if (value.startsWith('=') || value.startsWith('+') || value.startsWith('-') || value.startsWith('@')) {
        value = "'" + value;
    }
    if (value.includes(',') || value.includes('\n') || value.includes('\r') || value.includes('"')) {
        return `"${value.replace(/"/g, '""')}"`;
    }
    return value;
}
function formatAsCsv(data) {
    let identities = [];
    if (Array.isArray(data.identities)) {
        identities = data.identities;
    }
    else if (data.id) {
        identities = [data];
    }
    else {
        // Handle error responses properly for CSV
        const message = data.message || 'No data available';
        return `error\n"${escapeCsv(message)}"`;
    }
    if (identities.length === 0) {
        return 'error\n"No identities found"';
    }
    const headers = ['id', 'personalName', 'context', 'otherNames', 'pronouns', 'title', 'avatarUrl', 'socialLinks', 'isPrimary', 'createdAt', 'updatedAt'];
    const csvRows = [headers.join(',')];
    identities.forEach((identity) => {
        const row = [
            escapeCsv(identity.id || ''),
            escapeCsv(identity.personalName || ''),
            escapeCsv(identity.context || ''),
            escapeCsv((identity.otherNames || []).join('; ')),
            escapeCsv(identity.pronouns || ''),
            escapeCsv(identity.title || ''),
            escapeCsv(identity.avatarUrl || ''),
            escapeCsv(identity.socialLinks ? JSON.stringify(identity.socialLinks) : ''),
            identity.isPrimary ? 'true' : 'false',
            escapeCsv(identity.createdAt ? identity.createdAt.toString() : ''),
            escapeCsv(identity.updatedAt ? identity.updatedAt.toString() : '')
        ];
        csvRows.push(row.join(','));
    });
    return csvRows.join('\n');
}
function escapeXml(text) {
    return text
        .replace(/&/g, '&amp;')
        .replace(/</g, '&lt;')
        .replace(/>/g, '&gt;')
        .replace(/"/g, '&quot;')
        .replace(/'/g, '&#39;');
}
function safeCdata(text) {
    // Handle CDATA edge case - if text contains "]]>", we need to split it
    if (text.includes(']]>')) {
        const parts = text.split(']]>');
        return parts.map(part => `<![CDATA[${part}]]>`).join(']]&gt;');
    }
    return `<![CDATA[${text}]]>`;
}
function formatAsXml(data) {
    let identities = [];
    if (Array.isArray(data.identities)) {
        identities = data.identities;
    }
    else if (data.id) {
        identities = [data];
    }
    else {
        // Handle error responses properly for XML
        const message = data.message || 'No data available';
        return `<?xml version="1.0" encoding="UTF-8"?><response><error><message>${safeCdata(message)}</message></error></response>`;
    }
    const xmlLines = ['<?xml version="1.0" encoding="UTF-8"?>', '<identities>'];
    identities.forEach((identity) => {
        xmlLines.push('  <identity>');
        xmlLines.push(`    <id>${safeCdata(identity.id || '')}</id>`);
        xmlLines.push(`    <personalName>${safeCdata(identity.personalName || '')}</personalName>`);
        xmlLines.push(`    <context>${safeCdata(identity.context || '')}</context>`);
        if (identity.otherNames && identity.otherNames.length > 0) {
            xmlLines.push('    <otherNames>');
            identity.otherNames.forEach(name => {
                xmlLines.push(`      <name>${safeCdata(name)}</name>`);
            });
            xmlLines.push('    </otherNames>');
        }
        if (identity.pronouns)
            xmlLines.push(`    <pronouns>${safeCdata(identity.pronouns)}</pronouns>`);
        if (identity.title)
            xmlLines.push(`    <title>${safeCdata(identity.title)}</title>`);
        if (identity.avatarUrl)
            xmlLines.push(`    <avatarUrl>${safeCdata(identity.avatarUrl)}</avatarUrl>`);
        if (identity.socialLinks && Object.keys(identity.socialLinks).length > 0) {
            xmlLines.push('    <socialLinks>');
            Object.entries(identity.socialLinks).forEach(([platform, url]) => {
                xmlLines.push(`      <link platform="${escapeXml(platform)}">${safeCdata(url)}</link>`);
            });
            xmlLines.push('    </socialLinks>');
        }
        xmlLines.push(`    <isPrimary>${identity.isPrimary ? 'true' : 'false'}</isPrimary>`);
        xmlLines.push(`    <createdAt>${safeCdata(identity.createdAt ? identity.createdAt.toString() : '')}</createdAt>`);
        xmlLines.push(`    <updatedAt>${safeCdata(identity.updatedAt ? identity.updatedAt.toString() : '')}</updatedAt>`);
        xmlLines.push('  </identity>');
    });
    xmlLines.push('</identities>');
    return xmlLines.join('\n');
}
// Helper function to send formatted responses based on Accept header
function sendFormattedResponse(res, data, req, statusCode = 200) {
    const format = negotiateContent(req);
    const { content, contentType } = formatResponse(data, format, req);
    res.status(statusCode)
        .set('Content-Type', contentType)
        .send(content);
}
async function registerRoutes(app) {
    // Setup authentication
    await (0, replitAuth_1.setupAuth)(app);
    // Auth routes
    app.get('/api/auth/user', replitAuth_1.isAuthenticated, async (req, res) => {
        try {
            const authUser = req.user;
            const userId = getUserId(authUser);
            if (!userId) {
                return res.status(401).json({ message: "Unauthorized" });
            }
            const user = await storage_1.storage.getUser(userId);
            if (!user) {
                return res.status(404).json({ message: "User not found" });
            }
            res.json(user);
        }
        catch (error) {
            console.error("Error fetching user:", error);
            res.status(500).json({ message: "Failed to fetch user" });
        }
    });
    // Identity routes with content negotiation
    app.get('/api/identities', replitAuth_1.isAuthenticated, async (req, res) => {
        try {
            const authUser = req.user;
            const userId = getUserId(authUser);
            if (!userId) {
                return sendFormattedResponse(res, { message: "Unauthorized" }, req, 401);
            }
            const context = req.query.context;
            const identities = await storage_1.storage.getIdentities(userId, context);
            let responseData;
            if (context) {
                // Return only identities matching the context
                responseData = { identities };
            }
            else {
                // Return primary identity first, then all others
                const primaryIdentity = identities.find(i => i.isPrimary);
                if (primaryIdentity) {
                    responseData = {
                        primary: primaryIdentity,
                        identities: identities
                    };
                }
                else {
                    responseData = { identities };
                }
            }
            sendFormattedResponse(res, responseData, req);
        }
        catch (error) {
            console.error("Error fetching identities:", error);
            sendFormattedResponse(res, { message: "Failed to fetch identities" }, req, 500);
        }
    });
    app.get('/api/identities/:id', replitAuth_1.isAuthenticated, async (req, res) => {
        try {
            const authUser = req.user;
            const userId = getUserId(authUser);
            if (!userId) {
                return res.status(401).json({ message: "Unauthorized" });
            }
            const { id } = req.params;
            const identity = await storage_1.storage.getIdentity(id, userId);
            if (!identity) {
                return sendFormattedResponse(res, { message: "Identity not found" }, req, 404);
            }
            sendFormattedResponse(res, identity, req);
        }
        catch (error) {
            console.error("Error fetching identity:", error);
            sendFormattedResponse(res, { message: "Failed to fetch identity" }, req, 500);
        }
    });
    app.post('/api/identities', replitAuth_1.isAuthenticated, async (req, res) => {
        try {
            const authUser = req.user;
            const userId = getUserId(authUser);
            if (!userId) {
                return res.status(401).json({ message: "Unauthorized" });
            }
            // Validate request body
            const validation = schema_1.insertIdentitySchema.safeParse(req.body);
            if (!validation.success) {
                const error = (0, zod_validation_error_1.fromZodError)(validation.error);
                return res.status(400).json({
                    message: "Validation error",
                    details: error.message
                });
            }
            const identityData = validation.data;
            // Check for existing primary if this should be primary
            if (identityData.isPrimary) {
                const existingPrimary = await storage_1.storage.getPrimaryIdentity(userId);
                if (existingPrimary) {
                    identityData.isPrimary = true; // Will be handled in storage transaction
                }
            }
            const identity = await storage_1.storage.createIdentity(userId, identityData);
            res.status(201).json(identity);
        }
        catch (error) {
            console.error("Error creating identity:", error);
            res.status(500).json({ message: "Failed to create identity" });
        }
    });
    const updateIdentityHandler = async (req, res) => {
        try {
            const authUser = req.user;
            const userId = getUserId(authUser);
            if (!userId) {
                return res.status(401).json({ message: "Unauthorized" });
            }
            const { id } = req.params;
            console.log(`[${req.method}] /api/identities/${id} - User: ${userId}, Body:`, JSON.stringify(req.body, null, 2));
            // Validate request body
            const validation = schema_1.updateIdentitySchema.safeParse(req.body);
            if (!validation.success) {
                const error = (0, zod_validation_error_1.fromZodError)(validation.error);
                console.error("Validation error:", error.message);
                return res.status(400).json({
                    message: "Validation error",
                    details: error.message
                });
            }
            const updates = validation.data;
            console.log("Validated updates:", JSON.stringify(updates, null, 2));
            const identity = await storage_1.storage.updateIdentity(id, userId, updates);
            if (!identity) {
                console.log("Identity not found for id:", id, "userId:", userId);
                return res.status(404).json({ message: "Identity not found" });
            }
            console.log("Updated identity:", JSON.stringify(identity, null, 2));
            res.json(identity);
        }
        catch (error) {
            console.error("Error updating identity:", error);
            res.status(500).json({ message: "Failed to update identity" });
        }
    };
    app.put('/api/identities/:id', replitAuth_1.isAuthenticated, updateIdentityHandler);
    app.patch('/api/identities/:id', replitAuth_1.isAuthenticated, updateIdentityHandler);
    app.delete('/api/identities/:id', replitAuth_1.isAuthenticated, async (req, res) => {
        try {
            const authUser = req.user;
            const userId = getUserId(authUser);
            if (!userId) {
                return res.status(401).json({ message: "Unauthorized" });
            }
            const { id } = req.params;
            // Check if this is the only identity
            const allIdentities = await storage_1.storage.getIdentities(userId);
            if (allIdentities.length === 1) {
                return res.status(400).json({
                    message: "Cannot delete your only identity"
                });
            }
            const success = await storage_1.storage.deleteIdentity(id, userId);
            if (!success) {
                return res.status(404).json({ message: "Identity not found" });
            }
            res.status(204).send();
        }
        catch (error) {
            console.error("Error deleting identity:", error);
            res.status(500).json({ message: "Failed to delete identity" });
        }
    });
    app.post('/api/identities/:id/set-primary', replitAuth_1.isAuthenticated, async (req, res) => {
        try {
            const authUser = req.user;
            const userId = getUserId(authUser);
            if (!userId) {
                return res.status(401).json({ message: "Unauthorized" });
            }
            const { id } = req.params;
            const identity = await storage_1.storage.setPrimaryIdentity(id, userId);
            if (!identity) {
                return res.status(404).json({ message: "Identity not found" });
            }
            res.json(identity);
        }
        catch (error) {
            console.error("Error setting primary identity:", error);
            res.status(500).json({ message: "Failed to set primary identity" });
        }
    });
    // Public search endpoints
    app.get('/api/public/identities/search', replitAuth_1.isAuthenticated, async (req, res) => {
        try {
            const authUser = req.user;
            const requestingUserId = getUserId(authUser);
            if (!requestingUserId) {
                return res.status(401).json({ message: "Unauthorized" });
            }
            // Validate query parameters
            const validation = searchQuerySchema.safeParse(req.query);
            if (!validation.success) {
                const error = (0, zod_validation_error_1.fromZodError)(validation.error);
                return res.status(400).json({
                    message: "Validation error",
                    details: error.message
                });
            }
            const { context, q, limit, cursor } = validation.data;
            // Perform search
            const searchResult = await storage_1.storage.searchPublicIdentities(context, q, limit, cursor);
            // Create audit log for search operation
            await storage_1.storage.createAuditLog({
                userId: requestingUserId,
                entity: "identity",
                entityId: "search",
                operation: "search",
                diff: { context, query: q, resultCount: searchResult.identities.length },
            });
            res.json(searchResult);
        }
        catch (error) {
            console.error("Error searching public identities:", error);
            res.status(500).json({ message: "Failed to search identities" });
        }
    });
    app.get('/api/public/identities/:id', replitAuth_1.isAuthenticated, async (req, res) => {
        try {
            const authUser = req.user;
            const requestingUserId = getUserId(authUser);
            if (!requestingUserId) {
                return res.status(401).json({ message: "Unauthorized" });
            }
            const identityId = req.params.id;
            if (!identityId) {
                return res.status(400).json({ message: "Identity ID is required" });
            }
            // Get public identity
            const identity = await storage_1.storage.getPublicIdentity(identityId);
            if (!identity) {
                return res.status(404).json({ message: "Identity not found or not discoverable" });
            }
            // Create audit log for view-profile operation
            await storage_1.storage.createAuditLog({
                userId: requestingUserId,
                entity: "identity",
                entityId: identityId,
                operation: "view-profile",
                diff: { viewedContext: identity.context },
            });
            res.json(identity);
        }
        catch (error) {
            console.error("Error fetching public identity:", error);
            res.status(500).json({ message: "Failed to fetch identity" });
        }
    });
    const httpServer = (0, http_1.createServer)(app);
    return httpServer;
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,